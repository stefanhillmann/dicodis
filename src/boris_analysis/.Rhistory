ggplot(performance_filtered, aes(x=n_gram_size, y=f_measure, color=frequency_threshold)) + geom_point(shape=1)
performance_filtered$smoothing_value <- factor(performance_filtered$smoothing_value)
ggplot(performance_filtered, aes(x=n_gram_size, y=f_measure, color=frequency_threshold, shape=smoothing_value)) + geom_point(shape=1)
performance_filtered <- dbGetQuery(cross_validation, "performance", '{criteria: "task_successful"}', 0, 0)
performance_filtered$frequency_threshold <- factor(performance_filtered$frequency_threshold)
performance_filtered$smoothing_value <- factor(performance_filtered$smoothing_value)
ggplot(performance_filtered, aes(x=n_gram_size, y=f_measure, color=frequency_threshold, shape=smoothing_value)) + geom_point(shape=1)
performance_filtered$smoothing_value
factor(performance_filtered$smoothing_value)
as.numeric(factor(performance_filtered$smoothing_value))
ggplot(performance_filtered, aes(x=n_gram_size, y=f_measure, color=frequency_threshold, shape=smoothing_value)) +
geom_point(shape=1) +
scale_shape_manual(as.numeric(factor(performance_filtered$smoothing_value)))
ggplot(performance_filtered, aes(x=n_gram_size, y=f_measure, color=frequency_threshold, shape=smoothing_value)) +
geom_point(shape=1) +
scale_shape_manual(values = as.numeric(factor(performance_filtered$smoothing_value)))
ggplot(performance_filtered, aes(x=n_gram_size, y=f_measure, color=frequency_threshold, shape=smoothing_value)) +
geom_point(shape=1) +
scale_colour_discrete() +
scale_shape_manual(values = as.numeric(factor(performance_filtered$smoothing_value)))
performance_filtered$smoothing_value <- as.numeric(factor(performance_filtered$smoothing_value))
ggplot(performance_filtered, aes(x=n_gram_size, y=f_measure, color=frequency_threshold, shape=smoothing_value)) +
geom_point(shape=1) +
scale_colour_discrete() +
scale_shape_manual(values = as.numeric(factor(performance_filtered$smoothing_value)))
performance_filtered <- dbGetQuery(cross_validation, "performance", '{criteria: "task_successful"}', 0, 0)
performance_filtered$frequency_threshold <- factor(performance_filtered$frequency_threshold)
performance_filtered$smoothing_value <- factor(performance_filtered$smoothing_value)
ggplot(performance_filtered, aes(x=n_gram_size, y=f_measure, color=frequency_threshold, shape=smoothing_value)) +
geom_point(shape=1) +
scale_colour_discrete() +
scale_shape_manual(values = as.numeric(factor(performance_filtered$smoothing_value)))
head(performance_filtered)
ggplot(performance_filtered, aes(x=n_gram_size, y=f_measure, shape=smoothing_value)) +
geom_point(shape=1) +
scale_colour_discrete() +
ggplot(performance_filtered, aes(x=n_gram_size, y=f_measure, color=frequency_threshold, shape=smoothing_value)) +
geom_point() +
scale_colour_discrete() +
scale_shape_manual(values = as.numeric(factor(performance_filtered$smoothing_value)))
ggplot(performance_filtered, aes(x=n_gram_size, y=f_measure, color=frequency_threshold, shape=smoothing_value)) +
geom_point() +
scale_colour_discrete() +
scale_shape_manual(values = as.numeric(factor(performance_filtered$smoothing_value)))
ggplot(performance_filtered, aes(x=n_gram_size, y=f_measure, color=frequency_threshold, shape=smoothing_value)) +
geom_point(size = 3) +
scale_colour_discrete() +
scale_shape_manual(values = as.numeric(factor(performance_filtered$smoothing_value)))
ggplot(performance_filtered, aes(x=n_gram_size, y=f_measure, shape=frequency_threshold, color=smoothing_value)) +
geom_point(size = 3) +
scale_colour_discrete() +
scale_shape_manual(values = as.numeric(factor(performance_filtered$smoothing_value)))
performance_filtered <- dbGetQuery(cross_validation, "performance", '{criteria: "task_failed"}', 0, 0)
performance_filtered$frequency_threshold <- factor(performance_filtered$frequency_threshold)
performance_filtered$smoothing_value <- factor(performance_filtered$smoothing_value)
ggplot(performance_filtered, aes(x=n_gram_size, y=f_measure, shape=frequency_threshold, color=smoothing_value)) +
geom_point(size = 3) +
scale_colour_discrete() +
scale_shape_manual(values = as.numeric(factor(performance_filtered$smoothing_value)))
View(distances)
View(distances)
library(RMongo)
library(plyr)
library(ggplot2)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
dp <- dbGetQuery(cross_validation, "distance_performance", '{}', 0, 0)
View(dp)
ggplot(dp, aes(x = f_measure, y = distance, color = criteria)) +
geom_point(size)
ggplot(dp, aes(x = f_measure, y = distance, color = criteria)) +
geom_point()
dp <- dbGetQuery(cross_validation, "distance_performance", '{"criteria": "real"}', 0, 0)
ggplot(dp, aes(x = f_measure, y = distance)) +
geom_point()
View(dp)
dp <- dbGetQuery(cross_validation, "distance_performance", '{"classifier": "cosine"}', 0, 0)
ggplot(dp, aes(x = f_measure, y = distance)) +
geom_point()
ggplot(dp, aes(x = f_measure, y = distance, color = 'criteria')) +
geom_point()
ggplot(dp, aes(x = f_measure, y = distance, color = criteria)) +
geom_point()
ggplot(dp, aes(x = f_measure, y = distance, color = data_set)) +
geom_point()
ggplot(dp, aes(x = f_measure, y = distance, shape = data_set)) +
geom_point()
ggplot(dp, aes(x = f_measure, y = distance, color = data_set)) +
geom_point()
query = '{"classifier": "cosine", "data_set": "success"}'
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
ggplot(dp, aes(x = f_measure, y = distance, color = data_set)) +
geom_point()
View(dp)
ggplot(dp, aes(x = f_measure, y = distance, color = criteria)) +
geom_point()
ggplot(dp, aes(x = f_measure, y = distance, color = criteria)) +
geom_point() +
xlim(0, 1) +
ylim(0, 1)
query = '{"classifier": "jensen", "data_set": "success"}'
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
ggplot(dp, aes(x = f_measure, y = distance, color = criteria)) +
geom_point() +
xlim(0, 1) +
ylim(0, 1)
query = '{"classifier": "jensen", "data_set": "success"}'
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
ggplot(dp, aes(x = f_measure, y = distance)) +
geom_point() +
xlim(0, 1) +
ylim(0, 1)
query = '{"classifier": "jensen", "data_set": "dialogue_length"}'
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
ggplot(dp, aes(x = f_measure, y = distance)) +
geom_point() +
xlim(0, 1) +
ylim(0, 1)
query = '{"classifier": "cosine", "data_set": "dialogue_length"}'
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
ggplot(dp, aes(x = f_measure, y = distance)) +
geom_point() +
xlim(0, 1) +
ylim(0, 1)
ggplot(dp, aes(x = f_measure, y = distance)) +
geom_bar(stat='identity')
query = '{"classifier": "cosine"}' # , "data_set": "dialogue_length"}'
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
ggplot(dp, aes(x = f_measure, y = distance)) +
geom_point() +
xlim(0, 1) +
ylim(0, 1)
ggplot(dp, aes(x = f_measure, y = distance, color=data_set)) +
geom_point() +
xlim(0, 1) +
ylim(0, 1)
query = '{"classifier": "jensen"}' # , "data_set": "dialogue_length"}'
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
ggplot(dp, aes(x = f_measure, y = distance, color=data_set)) +
geom_point() +
xlim(0, 1) +
ylim(0, 1)
query = '{"classifier": "rank order"}' # , "data_set": "dialogue_length"}'
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
ggplot(dp, aes(x = f_measure, y = distance, color=data_set)) +
geom_point() +
xlim(0, 1) +
ylim(0, 1)
query = '{"classifier": "rank_order"}' # , "data_set": "dialogue_length"}'
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
ggplot(dp, aes(x = f_measure, y = distance, color=data_set)) +
geom_point() +
xlim(0, 1) +
ylim(0, 1)
query = '{"classifier": "rank_order"}' # , "data_set": "dialogue_length"}'
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
ggplot(dp, aes(x = f_measure, y = distance, color=data_set)) +
geom_point()
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
query = '{"classifier": "rank order"}' # , "data_set": "dialogue_length"}'
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
ggplot(dp, aes(x = f_measure, y = distance, color=data_set)) +
geom_point()
library(RMongo)
library(plyr)
library(ggplot2)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
performance <- dbGetQuery(cross_validation, "performance", '{}', 0, 0)
performance$f_measure
ggplot(data = performance, aes(x=f_measure)) +
geom_histogram(binwidth=.5)
ggplot(data = performance, aes(x=f_measure)) +
geom_histogram(binwidth=.01)
View(performance)
ggplot(data = performance, aes(x=f_measure, fill=classifier_name)) +
geom_histogram(binwidth=.01)
ggplot(data = performance, aes(x=f_measure, fill=classifier_name)) +
geom_histogram(binwidth=.01, stat = 'identity')
ggplot(data = performance, aes(x=f_measure, fill=classifier_name)) +
geom_histogram(binwidth=.01, position="identity")
ggplot(data = performance, aes(x=f_measure, fill=classifier_name)) +
geom_histogram(binwidth=.01, alpha=.5, position="identity")
ggplot(data = performance, aes(x=f_measure, fill=classifier_name)) +
geom_density()
ggplot(data = performance, aes(x=f_measure, colour=classifier_name)) +
geom_density()
boxplot(performance$f_measure ~ as.factor(performance$classifier_name))
ddply(performance, c('criteria', 'classifier_name'), summarise, min = min(f_measure), max = max(f_measure), mean = mean(f_measure), sd = sd(f_measure))
query = '{"classifier": "cosine"}'
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
ggplot(dp, aes(x = f_measure, y = distance, color=data_set)) +
geom_point()
query = '{"classifier": "cosine", "data_set": "real_vs_best_sim"}'
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
ggplot(dp, aes(x = f_measure, y = distance, color=data_set)) +
geom_point()
query = '{"classifier": "jensen", "data_set": "real_vs_best_sim"}'
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
ggplot(dp, aes(x = f_measure, y = distance, color=data_set)) +
geom_point()
ggplot(dp, aes(x = f_measure, y = distance, color=classifier)) +
geom_point()
query = '{"data_set": "real_vs_best_sim"}'
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
ggplot(dp, aes(x = f_measure, y = distance, color=classifier)) +
geom_point()
?scale
ggplot(dp, aes(x = f_measure, y = distance, color=classifier)) +
geom_point()
query = '{"data_set": "real_vs_best_sim, "f_measure: {$gt: 0.5}"}'
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
query = '{"data_set": "real_vs_best_sim, "f_measure: {"$gt": 0.5}"}'
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
query = '{"data_set": "real_vs_best_sim", "f_measure": {$gt: 0.5}}'
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
View(dp)
ggplot(dp, aes(x = f_measure, y = distance, color=classifier)) +
geom_point()
ggplot(data = dp, aes(x=f_measure, fill=classifier_name)) +
geom_histogram(binwidth=.01, alpha=.5, position="identity")
ggplot(data = dp, aes(x=f_measure, fill=classifier)) +
geom_histogram(binwidth=.01, alpha=.5, position="identity")
ggplot(data = dp, aes(x=f_measure, fill=classifier)) +
geom_histogram(binwidth=.001, alpha=.5, position="identity")
query = '{"data_set": "user_judgement", "f_measure": {$gt: 0.5}}'
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
ggplot(dp, aes(x = f_measure, y = distance, color=classifier)) +
geom_point()
#xlim(0, 1) +
#ylim(0, 1)
ggplot(data = dp, aes(x=f_measure, fill=classifier)) +
geom_histogram(binwidth=.001, alpha=.5, position="identity")
ggplot(data = dp, aes(x=f_measure, fill=classifier)) +
geom_histogram(binwidth=.001, alpha=.5, position="dodge")
ggplot(data = dp, aes(x=f_measure, fill=classifier)) +
geom_histogram(binwidth=.01, alpha=.5, position="dodge")
?count
dp <- dbGetQuery(cross_validation, "distance_performance", query, 0, 0)
count(dp, c('data_set', 'classifier'))
dp <- dbGetQuery(cross_validation, "distance_performance", {}, 0, 0)
count(dp, c('data_set', 'classifier'))
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
####
# Auflistung aller Maße die ale Klassifikator einen Wert größer 0.5 haben
dp <- dbGetQuery(cross_validation, "distance_performance", {}, 0, 0)
dp <- dbGetQuery(cross_validation, "distance_performance", '{}', 0, 0)
count(dp, c('data_set', 'classifier'))
dp <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gt: 0.5}}', 0, 0)
count(dp, c('data_set', 'classifier'))
dp <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gt: 0.6}}', 0, 0)
count(dp, c('data_set', 'classifier'))
seq(0.5, 1.0, 0.1)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
f_05 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.5, $lt: 0.6}}', 0, 0)
View(f_05)
f_05 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.5, $lt: 0.6}}', 0, 0)
f_06 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.6, $lt: 0.7}}', 0, 0)
f_07 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.7, $lt: 0.8}}', 0, 0)
f_08 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.8, $lt: 0.9}}', 0, 0)
f_09 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.9}}', 0, 0)
count(f_05, c('data_set', 'classifier'))
count(f_09, c('data_set', 'classifier'))
c_05 <- count(f_05, c('data_set', 'classifier'))
c_06 <- count(f_06, c('data_set', 'classifier'))
c_07 <- count(f_07, c('data_set', 'classifier'))
c_08 <- count(f_08, c('data_set', 'classifier'))
c_09 <- count(f_09, c('data_set', 'classifier'))
c_09
table(f_05)
f_05
head(f_05)
head(f_05[, c(4,6)])
table(f_05[, c(4,6)])
melt(table(f_05[, c(4,6)]))
library(reshape)
melt(table(f_05[, c(4,6)]))
melt(table(f_06[, c(4,6)]))
f_05 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.5, $lt: 0.6}}', 0, 0)
f_06 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.6, $lt: 0.7}}', 0, 0)
f_07 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.7, $lt: 0.8}}', 0, 0)
f_08 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.8, $lt: 0.9}}', 0, 0)
f_09 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.9}}', 0, 0)
c_05 <- melt(table(f_05[, c(4,6)]))
c_06 <- melt(table(f_06[, c(4,6)]))
c_07 <- melt(table(f_07[, c(4,6)]))
c_08 <- melt(table(f_08[, c(4,6)]))
c_09 <- melt(table(f_09[, c(4,6)]))
c_09
f_05
head(f_05)
f_05[, c(4,6)])
f_05[, c(4,6)]
f_05 <- f_05[, c(4,6)])
f_05 <- f_05[, c(4,6)]
f_05
f_05$step <- '05'
head(f_05)
f_05 <- f_05[, c(4,6)]
f_05$step <- '05'
f_06 <- f_05[, c(4,6)]
f_06$step <- '06'
f_07 <- f_05[, c(4,6)]
f_07$step <- '07'
f_08 <- f_05[, c(4,6)]
f_08$step <- '08'
f_09 <- f_05[, c(4,6)]
f_09$step <- '09'
f_05 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.5, $lt: 0.6}}', 0, 0)
f_06 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.6, $lt: 0.7}}', 0, 0)
f_07 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.7, $lt: 0.8}}', 0, 0)
f_08 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.8, $lt: 0.9}}', 0, 0)
f_09 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.9}}', 0, 0)
f_05 <- f_05[, c(4,6)]
f_05$step <- '05'
f_06 <- f_06[, c(4,6)]
f_06$step <- '06'
f_07 <- f_07[, c(4,6)]
f_07$step <- '07'
f_08 <- f_08[, c(4,6)]
f_08$step <- '08'
f_09 <- f_09[, c(4,6)]
f_09$step <- '09'
rbind(f_05, f_06)
counts <- rbind(f_05, f_06, f_07, f_08, f_09)
counts
head(counts)
ddply(counts, c('data_set', 'classifier'))
count(counts, c('data_set', 'classifier'))
cast(counts)
cast(counts, data_set ~ classifier)
dcast(counts, data_set ~ classifier)
?cast
head(counts)
cast(counts, data_set ~ classifier ~ step)
library(reshape2)
cast(counts, data_set + classifier ~ step)
cast(counts, data_set ~ step)
cast(counts, data_set ~ classifier)
cast(counts, data_set ~ step)
head(counts)
f_05 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.5, $lt: 0.6}}', 0, 0)
f_06 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.6, $lt: 0.7}}', 0, 0)
f_07 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.7, $lt: 0.8}}', 0, 0)
f_08 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.8, $lt: 0.9}}', 0, 0)
f_09 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.9}}', 0, 0)
f_05 <- f_05[, c(4,6)]
f_05$range <- '05'
f_06 <- f_06[, c(4,6)]
f_06$range <- '06'
f_07 <- f_07[, c(4,6)]
f_07$range <- '07'
f_08 <- f_08[, c(4,6)]
f_08$range <- '08'
f_09 <- f_09[, c(4,6)]
f_09$range <- '09'
cast(counts, data_set ~ range)
head(counts)
counts <- rbind(f_05, f_06, f_07, f_08, f_09)
cast(counts, data_set ~ range)
head(counts)
cast(counts, data_set ~ classifier)
counts@ange
counts@range
counts$range
calss(counts$range)
class(counts$range)
cast(counts, data_set ~ range)
counts[100,]
counts[,100]
counts[1:100,]
cast(counts[1:100,], data_set ~ range)
count(counts, c('data_set'))
count(counts, c('data_set', 'classifier'))
count(counts, c('data_set', 'classifier', 'range'))
cast(count(counts, c('data_set', 'classifier', 'range')), data_set+classifier~range)
?cast
cast(counts, data_set + classifier ~ range)
cast(counts, data_set + classifier ~ range, x)
cast( count(counts, c('data_set', 'classifier', 'range') ), data_set+classifier~range, fill="")
cast( count(counts, c('data_set', 'classifier', 'range') ), data_set+classifier~range, fill=0)
setwd("~/git/DialogueClassifying/src/boris_analysis")
library(RMongo)
library(plyr)
library(ggplot2)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
####
# Auflistung aller Maße die ale Klassifikator einen Wert größer 0.5 haben
f_05 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.5, $lt: 0.6}}', 0, 0)
f_06 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.6, $lt: 0.7}}', 0, 0)
f_07 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.7, $lt: 0.8}}', 0, 0)
f_08 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.8, $lt: 0.9}}', 0, 0)
f_09 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.9}}', 0, 0)
f_05 <- f_05[, c(4,6)]
f_05$range <- '05'
f_06 <- f_06[, c(4,6)]
f_06$range <- '06'
f_07 <- f_07[, c(4,6)]
f_07$range <- '07'
f_08 <- f_08[, c(4,6)]
f_08$range <- '08'
f_09 <- f_09[, c(4,6)]
f_09$range <- '09'
counts <- rbind(f_05, f_06, f_07, f_08, f_09)
# Ausgabe wieviel Klassifikatoren mit f > [0.6 - 1.0] exisitieren
cast( count(counts, c('data_set', 'classifier', 'range') ), data_set+classifier~range, fill=0)
library(RMongo)
library(plyr)
library(ggplot2)
library(reshape2)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
####
# Auflistung aller Maße die ale Klassifikator einen Wert größer 0.5 haben
f_05 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.5, $lt: 0.6}}', 0, 0)
f_06 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.6, $lt: 0.7}}', 0, 0)
f_07 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.7, $lt: 0.8}}', 0, 0)
f_08 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.8, $lt: 0.9}}', 0, 0)
f_09 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.9}}', 0, 0)
f_05 <- f_05[, c(4,6)]
f_05$range <- '05'
f_06 <- f_06[, c(4,6)]
f_06$range <- '06'
f_07 <- f_07[, c(4,6)]
f_07$range <- '07'
f_08 <- f_08[, c(4,6)]
f_08$range <- '08'
f_09 <- f_09[, c(4,6)]
f_09$range <- '09'
counts <- rbind(f_05, f_06, f_07, f_08, f_09)
# Ausgabe wieviel Klassifikatoren mit f > [0.6 - 1.0] exisitieren
cast( count(counts, c('data_set', 'classifier', 'range') ), data_set+classifier~range, fill=0)
library(RMongo)
library(plyr)
library(ggplot2)
library(reshape2)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
####
# Auflistung aller Maße die ale Klassifikator einen Wert größer 0.5 haben
f_05 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.5, $lt: 0.6}}', 0, 0)
f_06 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.6, $lt: 0.7}}', 0, 0)
f_07 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.7, $lt: 0.8}}', 0, 0)
f_08 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.8, $lt: 0.9}}', 0, 0)
f_09 <- dbGetQuery(cross_validation, "distance_performance", '{"f_measure": {$gte: 0.9}}', 0, 0)
f_05 <- f_05[, c(4,6)]
f_05$range <- '05'
f_06 <- f_06[, c(4,6)]
f_06$range <- '06'
f_07 <- f_07[, c(4,6)]
f_07$range <- '07'
f_08 <- f_08[, c(4,6)]
f_08$range <- '08'
f_09 <- f_09[, c(4,6)]
f_09$range <- '09'
counts <- rbind(f_05, f_06, f_07, f_08, f_09)
# Ausgabe wieviel Klassifikatoren mit f > [0.6 - 1.0] exisitieren
dcast( count(counts, c('data_set', 'classifier', 'range') ), data_set+classifier~range, fill=0)
count(counts, c('data_set', 'classifier', 'range') )
counts_summarized <- count(counts, c('data_set', 'classifier', 'range'))
dcast(counts_summarized, data_set+classifier~range, fill=0)
head(counts_summarized)
ggplot(data = counts_summarized, aes(x=data_set, y=freq, fill=range)) +
geom_bar(stat="identity")
ggplot(data = counts_summarized, aes(x=data_set, y=freq, fill=range)) +
geom_bar(stat="identity", position=position_dodge())
ggplot(data = counts_summarized, aes(x=range, y=freq, fill=data_set)) +
geom_bar(stat="identity", position=position_dodge())
ggplot(data = counts_summarized, aes(x=range, y=freq, fill=data_set)) +
geom_bar(stat="identity", position=position_dodge(), colour="black")
count(counts, c('data_set', 'classifier', 'range')
)
count(counts, c('data_set', 'classifier', 'range'))
count(counts, c('data_set', 'range'))
ggplot(data = count(counts, c('data_set', 'range')), aes(x=range, y=freq, fill=data_set)) +
geom_bar(stat="identity", position=position_dodge(), colour="black")
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
performance <- dbGetQuery(cross_validation, "performance", '{}', 0, 0)
distances <- dbGetQuery(cross_validation, "distances", '{}', 0, 0)
ggplot(data = performance, aes(x=f_measure, fill=classifier_name)) +
geom_histogram(binwidth=.01, alpha=.5, position="identity")
ggplot(data = performance, aes(x=f_measure, colour=classifier_name)) +
geom_density()
boxplot(performance$f_measure ~ as.factor(performance$classifier_name))
ddply(performance, c('criteria', 'classifier_name'), summarise, min = min(f_measure), max = max(f_measure), mean = mean(f_measure), sd = sd(f_measure))
?"RMongo"
library(RMongo)
library(plyr)
library(ggplot2)
library(reshape2)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
dbGetDistinct(cross_validation, 'documents_result', 'criteria')
?sprintf
library(RMongo)
library(plyr)
library(ggplot2)
library(reshape2)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
criteria <- dbGetDistinct(cross_validation, 'documents_result', 'criteria')
for (c in criteria) {
query = sprintf('{criteria: %s}', c)
result = dbGetQuery(cross_validation, 'documents_result', query, 0, 0)
sprintf('%s: %s', c(c, nrow(result)))
}
for (c in criteria) {
query = sprintf('{"criteria": "%s"}', c)
print(query)
result = dbGetQuery(cross_validation, 'documents_result', query, 0, 0)
sprintf('%s: %s', c(c, nrow(result)))
}
for (c in criteria) {
query = sprintf('{"criteria": "%s"}', c)
print(query)
result = dbGetQuery(cross_validation, 'documents_result', query, 0, 0)
sprintf('%s: %s', c, nrow(result))
}
