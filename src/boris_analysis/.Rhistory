#print(sprintf('f old: %s, f new: %s', o$f_measure, n$f_measure))
}
)
for (i in 1:nrow(old)) {
o <- old[i,]
n <- n[which(n$criteria == o$criteria
& n$classifier_name == o$classifier_name
& n$evaluation_id == o$evaluation_id
& n$n_gram_size == o$n_gram_size
& n$frequency_threshold == o$frequency_threshold
& n$smoothing_value == o$smoothing_value), ]
print(n)
#print(sprintf('f old: %s, f new: %s', o$f_measure, n$f_measure))
}
for (i in 1:nrow(old)) {
o <- old[i,]
n <- new[which(new$criteria == old$criteria
& new$classifier_name == old$classifier_name
& new$evaluation_id == old$evaluation_id
& new$n_gram_size == old$n_gram_size
& new$frequency_threshold == old$frequency_threshold
& new$smoothing_value == old$smoothing_value), ]
print(n)
#print(sprintf('f old: %s, f new: %s', o$f_measure, n$f_measure))
}
for (i in 1:nrow(old)) {
o <- old[i,]
n <- new[which(new$criteria == old$criteria
& new$classifier_name == old$classifier_name
& new$evaluation_id == old$evaluation_id
& new$n_gram_size == old$n_gram_size
& new$frequency_threshold == old$frequency_threshold
& new$smoothing_value == old$smoothing_value), ]
print(sprintf('f old: %s, f new: %s', o$f_measure, n$f_measure))
}
for (i in 1:nrow(old)) {
o <- old[i,]
n <- new[which(new$criteria == o$criteria
& new$classifier_name == o$classifier_name
& new$evaluation_id == o$evaluation_id
& new$n_gram_size == o$n_gram_size
& new$frequency_threshold == o$frequency_threshold
& new$smoothing_value == o$smoothing_value), ]
print(sprintf('f old: %s, f new: %s', o$f_measure, n$f_measure))
}
names(old)
d_fn <- o$false_negatives - n$false_negatives
d_fp <- o$false_positives - n$false_positives
d_tp <- o$true_positives - n$true_positives
d_f <- o$f_measure - n$f_measure
for (i in 1:nrow(old)) {
o <- old[i,]
n <- new[which(new$criteria == o$criteria
& new$classifier_name == o$classifier_name
& new$evaluation_id == o$evaluation_id
& new$n_gram_size == o$n_gram_size
& new$frequency_threshold == o$frequency_threshold
& new$smoothing_value == o$smoothing_value), ]
d_fn <- o$false_negatives - n$false_negatives
d_fp <- o$false_positives - n$false_positives
d_tp <- o$true_positives - n$true_positives
d_f <- o$f_measure - n$f_measure
if(sum(c(d_fn, d_fp, d_tp, d_f)) != 0.0)
stop(sprintf('Difference not equal to zero for: "%s" and "%s"'), o, n)
}
for (i in 1:nrow(old)) {
o <- old[i,]
n <- new[which(new$criteria == o$criteria
& new$classifier_name == o$classifier_name
& new$evaluation_id == o$evaluation_id
& new$n_gram_size == o$n_gram_size
& new$frequency_threshold == o$frequency_threshold
& new$smoothing_value == o$smoothing_value), ]
d_fn <- o$false_negatives - n$false_negatives
d_fp <- o$false_positives - n$false_positives
d_tp <- o$true_positives - n$true_positives
d_f <- o$f_measure - n$f_measure
if(sum(c(d_fn, d_fp, d_tp, d_f)) == 0.0)
stop(sprintf('Difference not equal to zero for: "%s" and "%s"'), o, n)
}
for (i in 1:nrow(old)) {
o <- old[i,]
n <- new[which(new$criteria == o$criteria
& new$classifier_name == o$classifier_name
& new$evaluation_id == o$evaluation_id
& new$n_gram_size == o$n_gram_size
& new$frequency_threshold == o$frequency_threshold
& new$smoothing_value == o$smoothing_value), ]
d_fn <- o$false_negatives - n$false_negatives
d_fp <- o$false_positives - n$false_positives
d_tp <- o$true_positives - n$true_positives
d_f <- o$f_measure - n$f_measure
if(sum(c(d_fn, d_fp, d_tp, d_f)) == 0.0)
stop(sprintf('Difference not equal to zero for: "%s" and "%s"', o, n))
}
str(o)
for (i in nrow(old)) {
o <- old[i,]
n <- new[which(new$criteria == o$criteria
& new$classifier_name == o$classifier_name
& new$evaluation_id == o$evaluation_id
& new$n_gram_size == o$n_gram_size
& new$frequency_threshold == o$frequency_threshold
& new$smoothing_value == o$smoothing_value), ]
d_fn <- o$false_negatives - n$false_negatives
d_fp <- o$false_positives - n$false_positives
d_tp <- o$true_positives - n$true_positives
d_f <- o$f_measure - n$f_measure
if(sum(c(d_fn, d_fp, d_tp, d_f)) == 0.0)
stop(sprintf('Difference not equal to zero for: "%s" and "%s"', str(o), str(n)))
}
for (i in nrow(old)) {
o <- old[i,]
n <- new[which(new$criteria == o$criteria
& new$classifier_name == o$classifier_name
& new$evaluation_id == o$evaluation_id
& new$n_gram_size == o$n_gram_size
& new$frequency_threshold == o$frequency_threshold
& new$smoothing_value == o$smoothing_value), ]
d_fn <- o$false_negatives - n$false_negatives
d_fp <- o$false_positives - n$false_positives
d_tp <- o$true_positives - n$true_positives
d_f <- o$f_measure - n$f_measure
if(sum(c(d_fn, d_fp, d_tp, d_f)) == 0.0) {
print('old: ' + o)
stop('Difference not equal to zero.')
}
}
for (i in nrow(old)) {
o <- old[i,]
n <- new[which(new$criteria == o$criteria
& new$classifier_name == o$classifier_name
& new$evaluation_id == o$evaluation_id
& new$n_gram_size == o$n_gram_size
& new$frequency_threshold == o$frequency_threshold
& new$smoothing_value == o$smoothing_value), ]
d_fn <- o$false_negatives - n$false_negatives
d_fp <- o$false_positives - n$false_positives
d_tp <- o$true_positives - n$true_positives
d_f <- o$f_measure - n$f_measure
if(sum(c(d_fn, d_fp, d_tp, d_f)) == 0.0) {
print('old: ' + str(o))
stop('Difference not equal to zero.')
}
}
print('old: ')
print(o)
for (i in nrow(old)) {
o <- old[i,]
n <- new[which(new$criteria == o$criteria
& new$classifier_name == o$classifier_name
& new$evaluation_id == o$evaluation_id
& new$n_gram_size == o$n_gram_size
& new$frequency_threshold == o$frequency_threshold
& new$smoothing_value == o$smoothing_value), ]
d_fn <- o$false_negatives - n$false_negatives
d_fp <- o$false_positives - n$false_positives
d_tp <- o$true_positives - n$true_positives
d_f <- o$f_measure - n$f_measure
if(sum(c(d_fn, d_fp, d_tp, d_f)) == 0.0) {
print('old: ')
print(o)
stop('Difference not equal to zero.')
}
}
for (i in nrow(old)) {
o <- old[i,]
n <- new[which(new$criteria == o$criteria
& new$classifier_name == o$classifier_name
& new$evaluation_id == o$evaluation_id
& new$n_gram_size == o$n_gram_size
& new$frequency_threshold == o$frequency_threshold
& new$smoothing_value == o$smoothing_value), ]
d_fn <- o$false_negatives - n$false_negatives
d_fp <- o$false_positives - n$false_positives
d_tp <- o$true_positives - n$true_positives
d_f <- o$f_measure - n$f_measure
if(sum(c(d_fn, d_fp, d_tp, d_f)) == 0.0) {
print('old:')
print(o)
print('new:')
print(n)
stop('Difference not equal to zero.')
}
}
for (i in 1:nrow(old)) {
o <- old[i,]
n <- new[which(new$criteria == o$criteria
& new$classifier_name == o$classifier_name
& new$evaluation_id == o$evaluation_id
& new$n_gram_size == o$n_gram_size
& new$frequency_threshold == o$frequency_threshold
& new$smoothing_value == o$smoothing_value), ]
d_fn <- o$false_negatives - n$false_negatives
d_fp <- o$false_positives - n$false_positives
d_tp <- o$true_positives - n$true_positives
d_f <- o$f_measure - n$f_measure
if(sum(c(d_fn, d_fp, d_tp, d_f)) == 0.0) {
print('old:')
print(o)
print('new:')
print(n)
stop('Difference not equal to zero.')
}
}
for (i in 1:nrow(old)) {
o <- old[i,]
n <- new[which(new$criteria == o$criteria
& new$classifier_name == o$classifier_name
& new$evaluation_id == o$evaluation_id
& new$n_gram_size == o$n_gram_size
& new$frequency_threshold == o$frequency_threshold
& new$smoothing_value == o$smoothing_value), ]
d_fn <- o$false_negatives - n$false_negatives
d_fp <- o$false_positives - n$false_positives
d_tp <- o$true_positives - n$true_positives
d_f <- o$f_measure - n$f_measure
if(sum(c(d_fn, d_fp, d_tp, d_f)) != 0.0) {
print('old:')
print(o)
print('new:')
print(n)
stop('Difference not equal to zero.')
}
}
library(RMongo)
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
preformance <- dbGetQuery(cross_validation, "performance", '{}', 0, 0)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
performance <- dbGetQuery(cross_validation, "performance", '{}', 0, 0)
ggplot(performance, aes(x = f_measure, y = auc)) + geom_point()
ggplot(performance, aes(x = n_gram_size, y = auc)) + geom_point()
ggplot(performance, aes(x = true_positives, y = auc)) + geom_point()
ggplot(performance, aes(x = auc)) + geom_histogram()
ggplot(performance, aes(x = auc)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") )
ggplot(performance, aes(x = auc)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")
ggplot(performance, aes(x = auc)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept=mean(rating, na.rm=T)),
color="red", linetype="dashed", size=1)
ggplot(performance, aes(x = auc)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept=mean(auc, na.rm=T)),
color="red", linetype="dashed", size=1)
ggplot(performance, aes(x = auc)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept=mean(auc, na.rm=T)),
color="red", linetype="dashed", size=1) +
geom_vline(aes(xintercept=median(auc, na.rm=T)),
color="red", size=1)
ggplot(performance, aes(x = true_positives, y = auc)) + geom_point()
ggplot(performance, aes(x = auc)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept=mean(auc, na.rm=T)),
color="red", linetype="dashed", size=1) +
geom_vline(aes(xintercept=median(auc, na.rm=T)),
color="red", size=1)
library(pROC)
?roc
getAnywhere(roc())
methods(pROC)
methods(roc())
methods(roc
)
roc.defualt
roc.default
getAnywhere("roc.default")
getAnywhere("auc.default")
methods(auc())
methods(roc())
methods(pROC)
methods("auc")
getAnywhere("function (response, predictor, controls, cases, density.controls,
density.cases, levels = base::levels(as.factor(response)),
percent = FALSE, na.rm = TRUE, direction = c("auto", "<",
">"), algorithm = 1, smooth = FALSE, auc = TRUE, ci = FALSE,
plot = FALSE, smooth.method = "binormal", ci.method = NULL,
density = NULL, ...)
{
direction <- match.arg(direction)
if (!missing(response) && !is.null(response) && !missing(predictor) &&
!is.null(predictor)) {
original.predictor <- predictor
original.response <- response
if (!is.numeric(predictor)) {
if (is.ordered(predictor))
predictor <- as.numeric(predictor)
else stop("Predictor must be numeric or ordered.")
}
if (is.matrix(predictor)) {
warning("Deprecated use a matrix as predictor. Unexpected results may be produced, please pass a numeric vector.")
}
if (is.matrix(response)) {
warning("Deprecated use a matrix as response. Unexpected results may be produced, please pass a vector or factor.")
}
if (length(predictor) != length(response)) {
stop("Response and predictor must be vectors of the same length.")
}
if (na.rm) {
nas <- is.na(response) | is.na(predictor)
if (any(nas)) {
na.action <- grep(TRUE, nas)
class(na.action) <- "omit"
response <- response[!nas]
attr(response, "na.action") <- na.action
predictor <- predictor[!nas]
attr(predictor, "na.action") <- na.action
}
}
else if (any(is.na(c(predictor[response == levels[1]],
predictor[response == levels[2]], response))))
return(NA)
splitted <- split(predictor, response)
controls <- splitted[[as.character(levels[1])]]
if (length(controls) == 0)
stop("No control observation.")
cases <- splitted[[as.character(levels[2])]]
if (length(cases) == 0)
stop("No case observation.")
patients.in.levels <- response %in% levels
if (!all(patients.in.levels)) {
response <- response[patients.in.levels]
predictor <- predictor[patients.in.levels]
}
}
else if (!missing(cases) && !is.null(cases) && !missing(controls) &&
!is.null(controls)) {
if (na.rm) {
if (any(is.na(controls)))
controls <- na.omit(controls)
if (any(is.na(cases)))
controls <- na.omit(cases)
}
else if (any(is.na(c(controls, cases))))
return(NA)
if (length(controls) == 0)
stop("No control observation.")
if (length(cases) == 0)
stop("No case observation.")
if (is.ordered(cases)) {
if (is.ordered(controls)) {
if (identical(attr(cases, "levels"), attr(controls,
"levels"))) {
original.predictor <- ordered(c(as.character(cases),
as.character(controls)), levels = attr(controls,
"levels"))
predictor <- as.numeric(original.predictor)
controls <- as.numeric(controls)
cases <- as.numeric(cases)
}
else {
stop("Levels of cases and controls differ.")
}
}
else {
stop("Cases are of ordered type but controls are not.")
}
}
else if (is.numeric(cases)) {
if (is.numeric(controls)) {
predictor <- c(controls, cases)
original.predictor <- predictor
}
else {
stop("Cases are of numeric type but controls are not.")
}
}
else {
stop("Cases and controls must be numeric ordered.")
}
response <- c(rep(0, length(controls)), rep(1, length(cases)))
original.response <- response
levels <- c(0, 1)
}
else if (!missing(density.cases) && !is.null(density.cases) &&
!missing(density.controls) && !is.null(density.controls)) {
if (!is.numeric(density.cases) || !is.numeric(density.controls))
stop("'density.cases' and 'density.controls' must be numeric values of density (over the y axis).")
if (direction == "auto")
dir <- "<"
else dir <- direction
smooth.roc <- smooth.roc.density(density.controls = density.controls,
density.cases = density.cases, percent = percent,
direction = dir)
class(smooth.roc) <- "smooth.roc"
smooth.roc <- sort(smooth.roc)
smooth.roc$specificities <- c(0, as.vector(smooth.roc$specificities),
ifelse(percent, 100, 1))
smooth.roc$sensitivities <- c(ifelse(percent, 100, 1),
as.vector(smooth.roc$sensitivities), 0)
smooth.roc$percent <- percent
smooth.roc$direction <- direction
smooth.roc$call <- match.call()
if (auc) {
smooth.roc$auc <- auc(smooth.roc, ...)
if (direction == "auto" && smooth.roc$auc < roc.utils.min.partial.auc.auc(smooth.roc$auc)) {
smooth.roc <- roc.default(density.controls = density.controls,
density.cases = density.cases, levels = levels,
percent = percent, direction = ">", auc = auc,
ci = ci, plot = plot, ...)
smooth.roc$call <- match.call()
return(smooth.roc)
}
}
if (ci)
warning("CI can not be computed with densities.")
if (plot)
plot.roc(smooth.roc, ...)
return(smooth.roc)
}
else {
stop("No valid data provided.")
}
if (direction == "auto" && median(controls) <= median(cases))
direction <- "<"
else if (direction == "auto" && median(controls) > median(cases))
direction <- ">"
if (smooth) {
if (missing(density.controls))
density.controls <- density
if (missing(density.cases))
density.cases <- density
}
if (identical(algorithm, 0)) {
if (!requireNamespace("microbenchmark"))
stop("Package microbenchmark not available, required with algorithm=0'. Please install it with 'install.packages(\"microbenchmark\")'.")
cat("Starting benchmark of algorithms 2 and 3, 10 iterations...\n")
thresholds <- roc.utils.thresholds(c(controls, cases))
benchmark <- try(microbenchmark::microbenchmark(`2` = roc.utils.perfs.all.fast(thresholds = thresholds,
controls = controls, cases = cases, direction = direction),
`3` = rocUtilsPerfsAllC(thresholds = thresholds,
controls = controls, cases = cases, direction = direction),
times = 10))
if (is(benchmark, "try-error")) {
warning("Microbenchmark failed. Using default algorithm 1.")
algorithm <- 1
}
else {
print(summary(benchmark))
if (any(is.na(benchmark))) {
warning("Microbenchmark returned NA. Using default algorithm 1.")
algorithm <- 1
}
else if (which.min(tapply(benchmark$time, benchmark$expr,
sum)) == 1) {
algorithm <- 2
cat("Selecting algorithm 2.\n")
}
else {
algorithm <- 3
cat("Selecting algorithm 3.\n")
}
}
}
if (identical(algorithm, 1)) {
fun.sesp <- roc.utils.perfs.all.safe
}
else if (identical(algorithm, 2)) {
fun.sesp <- roc.utils.perfs.all.fast
}
else if (identical(algorithm, 3)) {
fun.sesp <- rocUtilsPerfsAllC
}
else if (identical(algorithm, 4)) {
fun.sesp <- roc.utils.perfs.all.test
}
else {
stop("Unknown algorithm (must be 0, 1, 2, 3 or 4).")
}
roc <- roc.cc.nochecks(controls, cases, percent = percent,
direction = direction, fun.sesp = fun.sesp, smooth = smooth,
density.cases = density.cases, density.controls = density.controls,
smooth.method = smooth.method, auc, ...)
roc$call <- match.call()
if (smooth) {
attr(roc, "roc")$call <- roc$call
attr(roc, "roc")$original.predictor <- original.predictor
attr(roc, "roc")$original.response <- original.response
attr(roc, "roc")$predictor <- predictor
attr(roc, "roc")$response <- response
attr(roc, "roc")$levels <- levels
}
roc$original.predictor <- original.predictor
roc$original.response <- original.response
roc$predictor <- predictor
roc$response <- response
roc$levels <- levels
if (ci)
roc$ci <- ci(roc, method = ci.method, ...)
if (plot)
plot.roc(roc, ...)
return(roc)
}")
_))))
)))
))
qui
}}}}}}}}}}}}}000
)
l
