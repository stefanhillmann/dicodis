geom_histogram(position = "identity", binwidth=0.001) +
#ggtitle(
#  bquote(
#    atop(
#      list(.(criteria_name)),
#      list(AUC==.(round(auc, 3)), n==.(n_gram_size), lambda==.(smoothing_value), f[min]==.(frequency_threshold))
#      ))) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria, ncol = 2)
print(plot)
plot <- ggplot(doc_results[which(doc_results$criteria=="real"),], aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity", binwidth=0.001) +
#ggtitle(
#  bquote(
#    atop(
#      list(.(criteria_name)),
#      list(AUC==.(round(auc, 3)), n==.(n_gram_size), lambda==.(smoothing_value), f[min]==.(frequency_threshold))
#      ))) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria, ncol = 2)
print(plot)
plot <- ggplot(doc_results[which(doc_results$criteria=="real"),], aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity", binwidth=0.001) +
geom_density() +
#ggtitle(
#  bquote(
#    atop(
#      list(.(criteria_name)),
#      list(AUC==.(round(auc, 3)), n==.(n_gram_size), lambda==.(smoothing_value), f[min]==.(frequency_threshold))
#      ))) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria, ncol = 2)
print(plot)
plot <- ggplot(doc_results[which(doc_results$criteria=="real"),], aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity", binwidth=0.001) +
geom_density(alpha=.3) +
#ggtitle(
#  bquote(
#    atop(
#      list(.(criteria_name)),
#      list(AUC==.(round(auc, 3)), n==.(n_gram_size), lambda==.(smoothing_value), f[min]==.(frequency_threshold))
#      ))) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria, ncol = 2)
print(plot)
plot <- ggplot(doc_results, aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity", binwidth=0.001) +
geom_density(alpha=.3) +
#ggtitle(
#  bquote(
#    atop(
#      list(.(criteria_name)),
#      list(AUC==.(round(auc, 3)), n==.(n_gram_size), lambda==.(smoothing_value), f[min]==.(frequency_threshold))
#      ))) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria, ncol = 2)
print(plot)
plot <- ggplot(doc_results, aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity") +
geom_density(alpha=.3) +
#ggtitle(
#  bquote(
#    atop(
#      list(.(criteria_name)),
#      list(AUC==.(round(auc, 3)), n==.(n_gram_size), lambda==.(smoothing_value), f[min]==.(frequency_threshold))
#      ))) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria, ncol = 2, scales = "free")
print(plot)
doc_results <- NULL
for (i in 1:nrow(cutted.all_best[which(cutted.all_best$classifier_name=="rank order"),])) {
p_row <- cutted.all_best[i,]
q <- sprintf("{classifier_name: '%s', frequency_threshold: %d, n_gram_size: %d, criteria: '%s', smoothing_value: %f}",
p_row$classifier_name, p_row$frequency_threshold, p_row$n_gram_size, p_row$criteria, p_row$smoothing_value)
print(q)
r <- dbGetQuery(cross_validation, "documents_result", q, 0, 0)
print(unique(r$classifier_name))
ifelse(is.null(doc_results), doc_results <- r, doc_results <- rbind(doc_results, r))
}
plot <- ggplot(doc_results, aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity") +
# geom_density(alpha=.3) +
#ggtitle(
#  bquote(
#    atop(
#      list(.(criteria_name)),
#      list(AUC==.(round(auc, 3)), n==.(n_gram_size), lambda==.(smoothing_value), f[min]==.(frequency_threshold))
#      ))) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria, ncol = 2, scales = "free")
print(plot)
doc_results <- NULL
for (i in 1:nrow(cutted.all_best[which(cutted.all_best$classifier_name=="rank order"),])) {
p_row <- cutted.all_best[i,]
q <- sprintf("{classifier_name: '%s', frequency_threshold: %d, n_gram_size: %d, criteria: '%s', smoothing_value: %f}",
p_row$classifier_name, p_row$frequency_threshold, p_row$n_gram_size, p_row$criteria, p_row$smoothing_value)
print(q)
r <- dbGetQuery(cross_validation, "documents_result", q, 0, 0)
print(unique(r$classifier_name))
ifelse(is.null(doc_results), doc_results <- r, doc_results <- rbind(doc_results, r))
}
for (i in 1:nrow(cutted.all_best[which(cutted.all_best$classifier_name=="rank order"),])) {
p_row <- cutted.all_best[i,]
q <- sprintf("{classifier_name: '%s', frequency_threshold: %d, n_gram_size: %d, criteria: '%s', smoothing_value: %f}",
p_row$classifier_name, p_row$frequency_threshold, p_row$n_gram_size, p_row$criteria, p_row$smoothing_value)
print(q)
r <- dbGetQuery(cross_validation, "documents_result", q, 0, 0)
print(unique(r$classifier_name))
ifelse(is.null(doc_results), doc_results <- r, doc_results <- rbind(doc_results, r))
}
doc_results <- NULL
for (i in 1:nrow(cutted.all_best)) {
p_row <- cutted.all_best[i,]
q <- sprintf("{classifier_name: '%s', frequency_threshold: %d, n_gram_size: %d, criteria: '%s', smoothing_value: %f}",
p_row$classifier_name, p_row$frequency_threshold, p_row$n_gram_size, p_row$criteria, p_row$smoothing_value)
print(q)
r <- dbGetQuery(cross_validation, "documents_result", q, 0, 0)
print(unique(r$classifier_name))
ifelse(is.null(doc_results), doc_results <- r, doc_results <- rbind(doc_results, r))
}
plot <- ggplot(doc_results[which(doc_results$classifier_name=="cosine")], aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity") +
# geom_density(alpha=.3) +
#ggtitle(
#  bquote(
#    atop(
#      list(.(criteria_name)),
#      list(AUC==.(round(auc, 3)), n==.(n_gram_size), lambda==.(smoothing_value), f[min]==.(frequency_threshold))
#      ))) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria, ncol = 2, scales = "free")
print(plot)
plot <- ggplot(doc_results[which(doc_results$classifier_name=="rank order")], aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity") +
# geom_density(alpha=.3) +
#ggtitle(
#  bquote(
#    atop(
#      list(.(criteria_name)),
#      list(AUC==.(round(auc, 3)), n==.(n_gram_size), lambda==.(smoothing_value), f[min]==.(frequency_threshold))
#      ))) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria, ncol = 2, scales = "free")
print(plot)
plot <- ggplot(doc_results[which(doc_results$classifier_name=="cosine")], aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity") +
# geom_density(alpha=.3) +
#ggtitle(
#  bquote(
#    atop(
#      list(.(criteria_name)),
#      list(AUC==.(round(auc, 3)), n==.(n_gram_size), lambda==.(smoothing_value), f[min]==.(frequency_threshold))
#      ))) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria, ncol = 2, scales = "free")
print(plot)
plot <- ggplot(doc_results[which(doc_results$classifier_name=="cosine"),], aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity") +
# geom_density(alpha=.3) +
#ggtitle(
#  bquote(
#    atop(
#      list(.(criteria_name)),
#      list(AUC==.(round(auc, 3)), n==.(n_gram_size), lambda==.(smoothing_value), f[min]==.(frequency_threshold))
#      ))) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria, ncol = 2, scales = "free")
print(plot)
plot <- ggplot(doc_results[which(doc_results$classifier_name=="rank order"),], aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity") +
# geom_density(alpha=.3) +
#ggtitle(
#  bquote(
#    atop(
#      list(.(criteria_name)),
#      list(AUC==.(round(auc, 3)), n==.(n_gram_size), lambda==.(smoothing_value), f[min]==.(frequency_threshold))
#      ))) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria, ncol = 2, scales = "free")
print(plot)
doc_results <- NULL
for (i in 1:nrow(cutted.all_best)) {
p_row <- cutted.all_best[i,]
q <- sprintf("{classifier_name: '%s', frequency_threshold: %d, n_gram_size: %d, criteria: '%s', smoothing_value: %f}",
p_row$classifier_name, p_row$frequency_threshold, p_row$n_gram_size, p_row$criteria, p_row$smoothing_value)
r <- dbGetQuery(cross_validation, "documents_result", q, 0, 0)
ifelse(is.null(doc_results), doc_results <- r, doc_results <- rbind(doc_results, r))
doc_results$criteria_name <- p_row$criteria_name
}
plot <- ggplot(doc_results[which(doc_results$classifier_name=="rank order"),], aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity") +
# geom_density(alpha=.3) +
#ggtitle(
#  bquote(
#    atop(
#      list(.(criteria_name)),
#      list(AUC==.(round(auc, 3)), n==.(n_gram_size), lambda==.(smoothing_value), f[min]==.(frequency_threshold))
#      ))) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria_name, ncol = 2, scales = "free")
print(plot)
doc_results <- NULL
for (i in 1:nrow(cutted.all_best)) {
p_row <- cutted.all_best[i,]
q <- sprintf("{classifier_name: '%s', frequency_threshold: %d, n_gram_size: %d, criteria: '%s', smoothing_value: %f}",
p_row$classifier_name, p_row$frequency_threshold, p_row$n_gram_size, p_row$criteria, p_row$smoothing_value)
r <- dbGetQuery(cross_validation, "documents_result", q, 0, 0)
ifelse(is.null(doc_results), doc_results <- r, doc_results <- rbind(doc_results, r))
doc_results$criteria_name <- unique(p_row$criteria_name)
}
p_row$criteria_name
p_row$criteria_name[1]
class(p_row$criteria_name[1])
class(p_row$criteria_name)
doc_results$foo <- "foo"
doc_results <- NULL
for (i in 1:nrow(cutted.all_best)) {
p_row <- cutted.all_best[i,]
q <- sprintf("{classifier_name: '%s', frequency_threshold: %d, n_gram_size: %d, criteria: '%s', smoothing_value: %f}",
p_row$classifier_name, p_row$frequency_threshold, p_row$n_gram_size, p_row$criteria, p_row$smoothing_value)
r <- dbGetQuery(cross_validation, "documents_result", q, 0, 0)
ifelse(is.null(doc_results), doc_results <- r, doc_results <- rbind(doc_results, r))
doc_results$criteria_name <- p_row$criteria_name[1]
}
class("foo")
str("foo")
doc_results <- NULL
for (i in 1:nrow(cutted.all_best)) {
p_row <- cutted.all_best[i,]
q <- sprintf("{classifier_name: '%s', frequency_threshold: %d, n_gram_size: %d, criteria: '%s', smoothing_value: %f}",
p_row$classifier_name, p_row$frequency_threshold, p_row$n_gram_size, p_row$criteria, p_row$smoothing_value)
r <- dbGetQuery(cross_validation, "documents_result", q, 0, 0)
ifelse(is.null(doc_results), doc_results <- r, doc_results <- rbind(doc_results, r))
doc_results$criteria_name <- str(p_row$criteria_name[1])
}
?rep
rep("foo", 5)
p_row$criteria_name
doc_results <- NULL
for (i in 1:nrow(cutted.all_best)) {
p_row <- cutted.all_best[i,]
q <- sprintf("{classifier_name: '%s', frequency_threshold: %d, n_gram_size: %d, criteria: '%s', smoothing_value: %f}",
p_row$classifier_name, p_row$frequency_threshold, p_row$n_gram_size, p_row$criteria, p_row$smoothing_value)
r <- dbGetQuery(cross_validation, "documents_result", q, 0, 0)
ifelse(is.null(doc_results), doc_results <- r, doc_results <- rbind(doc_results, r))
doc_results$criteria_name <- rep(p_row$criteria_name, nrow(doc_results))
}
doc_results <- NULL
for (i in 1:nrow(cutted.all_best)) {
p_row <- cutted.all_best[i,]
q <- sprintf("{classifier_name: '%s', frequency_threshold: %d, n_gram_size: %d, criteria: '%s', smoothing_value: %f}",
p_row$classifier_name, p_row$frequency_threshold, p_row$n_gram_size, p_row$criteria, p_row$smoothing_value)
r <- dbGetQuery(cross_validation, "documents_result", q, 0, 0)
r$criteria_name <- p_row$criteria_name
ifelse(is.null(doc_results), doc_results <- r, doc_results <- rbind(doc_results, r))
}
View(doc_results)
doc_results <- NULL
for (i in 1:nrow(cutted.all_best)) {
p_row <- cutted.all_best[i,]
q <- sprintf("{classifier_name: '%s', frequency_threshold: %d, n_gram_size: %d, criteria: '%s', smoothing_value: %f}",
p_row$classifier_name, p_row$frequency_threshold, p_row$n_gram_size, p_row$criteria, p_row$smoothing_value)
r <- dbGetQuery(cross_validation, "documents_result", q, 0, 0)
r$criteria_name <- p_row$criteria_name
ifelse(is.null(doc_results), doc_results <- r, doc_results <- rbind(doc_results, r))
}
plot <- ggplot(doc_results[which(doc_results$classifier_name=="rank order"),], aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity") +
# geom_density(alpha=.3) +
#ggtitle(
#  bquote(
#    atop(
#      list(.(criteria_name)),
#      list(AUC==.(round(auc, 3)), n==.(n_gram_size), lambda==.(smoothing_value), f[min]==.(frequency_threshold))
#      ))) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria_name, ncol = 2, scales = "free")
print(plot)
doc_results <- NULL
for (i in 1:nrow(cutted.all_best)) {
p_row <- cutted.all_best[i,]
q <- sprintf("{classifier_name: '%s', frequency_threshold: %d, n_gram_size: %d, criteria: '%s', smoothing_value: %f}",
p_row$classifier_name, p_row$frequency_threshold, p_row$n_gram_size, p_row$criteria, p_row$smoothing_value)
r <- dbGetQuery(cross_validation, "documents_result", q, 0, 0)
r$criteria_name <- p_row$criteria_name
r$auc <- p_row$auc
ifelse(is.null(doc_results), doc_results <- r, doc_results <- rbind(doc_results, r))
}
View(doc_results)
plot <- ggplot(doc_results[which(doc_results$classifier_name=="rank order"),], aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity") +
# geom_density(alpha=.3) +
ggtitle(
bquote(
atop(
list(.(criteria_name)),
list(AUC==.(round(auc, 3)), n==.(n_gram_size), lambda==.(smoothing_value), f[min]==.(frequency_threshold))
))) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria_name, ncol = 2, scales = "free")
print(plot)
plot <- ggplot(doc_results[which(doc_results$classifier_name=="rank order"),], aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity") +
# geom_density(alpha=.3) +
ggtitle(
bquote(
atop(
list(.(doc_results$criteria_name))#,
#list(AUC==.(round(auc, 3)), n==.(n_gram_size), lambda==.(smoothing_value), f[min]==.(frequency_threshold))
))) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria_name, ncol = 2, scales = "free")
print(plot)
plot <- ggplot(doc_results[which(doc_results$classifier_name=="rank order"),], aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity") +
# geom_density(alpha=.3) +
ggtitle("Foo")
#ggtitle(
#  bquote(
#    atop(
#      list(.(doc_results$criteria_name))#,
#list(AUC==.(round(auc, 3)), n==.(n_gram_size), lambda==.(smoothing_value), f[min]==.(frequency_threshold))
#      ))) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria_name, ncol = 2, scales = "free")
print(plot)
plot <- ggplot(doc_results[which(doc_results$classifier_name=="rank order"),], aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity") +
# geom_density(alpha=.3) +
ggtitle("Foo") +
#ggtitle(
#  bquote(
#    atop(
#      list(.(doc_results$criteria_name))#,
#list(AUC==.(round(auc, 3)), n==.(n_gram_size), lambda==.(smoothing_value), f[min]==.(frequency_threshold))
#      ))) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria_name, ncol = 2, scales = "free")
print(plot)
for(cn in unique(doc_results$classifier_name)) {
cn_results <- doc_results[which(doc_results$classifier_name == cn), ]
plot <- ggplot(cn_results[which(doc_results$classifier_name=="rank order"),], aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity") +
# geom_density(alpha=.3) +
ggtitle(cn) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria_name, ncol = 2, scales = "free")
print(plot)
}
for(cn in unique(doc_results$classifier_name)) {
cn_results <- doc_results[which(doc_results$classifier_name == cn), ]
plot <- ggplot(cn_results, aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity") +
# geom_density(alpha=.3) +
ggtitle(cn) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria_name, ncol = 2, scales = "free")
print(plot)
}
setwd("~/git/DialogueClassifying/src/boris_analysis")
devtools::install_github('rstudio/rmarkdown')
library(devtools)
install.packages("devtools")
library(devtools)
dev_mode(on=TRUE)
install_github('rstudio/rmarkdown')
dev_mode(on=FALSE)
log(3)
log(-3)
cn_results <- doc_results[which(doc_results$classifier_name == cn), ]
plot <- ggplot(cn_results, aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity", alpha = 0.5) +
# geom_density(alpha=.3) +
ggtitle(cn) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria_name, ncol = 2, scales = "free")
print(plot)
for(cn in unique(doc_results$classifier_name)) {
cn_results <- doc_results[which(doc_results$classifier_name == cn), ]
plot <- ggplot(cn_results, aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity", alpha = 0.5) +
# geom_density(alpha=.3) +
ggtitle(cn) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria_name, ncol = 2, scales = "free")
suppressMessages(print(plot))
}
cn_results <- doc_results[which(doc_results$classifier_name == cn), ]
plot <- ggplot(cn_results, aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity", alpha = 0.5, binwidth = diff(range(cn_results$positive_class_distance-cn_results$negative_class_distance))/30)) +
# geom_density(alpha=.3) +
ggtitle(cn) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria_name, ncol = 2, scales = "free")
suppressWarnings(print(plot))
range(cn_results$positive_class_distance - cn_results$negative_class_distance)
diff(range(cn_results$positive_class_distance - cn_results$negative_class_distance))
?diff
diff(range(cn_results$positive_class_distance - cn_results$negative_class_distance))/30
cn_results <- doc_results[which(doc_results$classifier_name == cn), ]
plot <- ggplot(cn_results, aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity", alpha = 0.5,
binwidth = diff(range(cn_results$positive_class_distance - cn_results$negative_class_distance))/30) +
# geom_density(alpha=.3) +
ggtitle(cn) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria_name, ncol = 2, scales = "free")
print(plot)
cn_results <- doc_results[which(doc_results$classifier_name == cn), ]
plot <- ggplot(cn_results, aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity", alpha = 0.5,
binwidth = diff(range(cn_results$positive_class_distance - cn_results$negative_class_distance))/30) +
# geom_density(alpha=.3) +
ggtitle(cn) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria_name, ncol = 2, scales = "free")
print(plot)
for(cn in unique(doc_results$classifier_name)) {
cn_results <- doc_results[which(doc_results$classifier_name == cn), ]
plot <- ggplot(cn_results, aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity", alpha = 0.5#,
#binwidth = diff(range(cn_results$positive_class_distance - cn_results$negative_class_distance))/30
) +
# geom_density(alpha=.3) +
ggtitle(cn) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria_name, ncol = 2, scales = "free")
print(plot)
}
cn_results <- doc_results[which(doc_results$classifier_name == cn), ]
plot <- ggplot(cn_results, aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity", alpha = 0.5#,
#binwidth = diff(range(cn_results$positive_class_distance - cn_results$negative_class_distance))/30
) +
# geom_density(alpha=.3) +
ggtitle(cn) +
xlab("score") +
scale_fill_discrete(name="True Class") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class))) +
facet_wrap( ~ criteria_name, ncol = 2, scales = "free")
print(plot)
geom_histogram(position = "identity", alpha = 0.5#,
#binwidth = diff(range(cn_results$positive_class_distance - cn_results$negative_class_distance))/30
) +
# geom_density(alpha=.3) +
ggtitle(cn) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class)), name="True Class") +
facet_wrap( ~ criteria_name, ncol = 2, scales = "free")
print(plot)
plot <- ggplot(cn_results, aes(x=positive_class_distance-negative_class_distance, fill=true_class)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle(cn) +
xlab("score") +
theme(plot.title = element_text(size = 10)) +
scale_fill_manual(values = discrete_cm(unique(doc_results$true_class)), name="True Class") +
facet_wrap( ~ criteria_name, ncol = 2, scales = "free")
print(plot)
