wssplot(mydata)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
p <- dbGetQuery(cross_validation, "performance", '{}', 0, 0)
p.features <- data.frame(f = p$f_measure, sv = p$smoothing_value, n = p$n_gram_size, ft = p$frequency_threshold)
mydata <- p.features
wssplot(mydata)
r <- kmeans(mydata, 3)
t <- table(mydata$n, r$cluster)
randIndex(t)
plot3d(jitter(mydata$n), jitter(mydata$sv), mydata$ft, col=r$cluster)
r <- kmeans(mydata, 4)
t <- table(mydata$n, r$cluster)
randIndex(t)
plot3d(jitter(mydata$n), jitter(mydata$sv), mydata$ft, col=r$cluster)
r <- kmeans(mydata, 16)
t <- table(mydata$n, r$cluster)
randIndex(t)
plot3d(jitter(mydata$n), jitter(mydata$sv), mydata$ft, col=r$cluster)
r <- kmeans(mydata, 8)
t <- table(mydata$n, r$cluster)
randIndex(t)
plot3d(jitter(mydata$n), jitter(mydata$sv), mydata$ft, col=r$cluster)
p.features <- data.frame(f = p$f_measure, sv = p$smoothing_value, n = p$n_gram_size, ft = p$frequency_threshold)
mydata <- p.features
wssplot(mydata)
r <- kmeans(mydata, 8)
t <- table(mydata$n, r$cluster)
randIndex(t)
plot3d(jitter(mydata$n), jitter(mydata$sv), mydata$ft, col=r$cluster)
r <- kmeans(mydata, 8)
t <- table(mydata$n, r$cluster)
randIndex(t)
plot3d(jitter(mydata$n), jitter(mydata$sv), mydata$ft, col=r$cluster)
r <- kmeans(mydata, 8)
t <- table(mydata$n, r$cluster)
randIndex(t)
plot3d(jitter(mydata$n), jitter(mydata$sv), mydata$ft, col=r$cluster)
set.seed("1234")
set.seed(1234)
wssplot(mydata)
r <- kmeans(mydata, 8)
t <- table(mydata$n, r$cluster)
randIndex(t)
plot3d(jitter(mydata$n), jitter(mydata$sv), mydata$ft, col=r$cluster)
set.seed(1234)
wssplot(mydata)
r <- kmeans(mydata, 8)
t <- table(mydata$n, r$cluster)
randIndex(t)
plot3d(jitter(mydata$n), jitter(mydata$sv), mydata$ft, col=r$cluster)
set.seed(1234)
wssplot(mydata)
r <- kmeans(mydata, 8)
t <- table(mydata$n, r$cluster)
randIndex(t)
plot3d(jitter(mydata$n), jitter(mydata$sv), mydata$ft, col=r$cluster)
p.features <- data.frame(f = p$f_measure, n = p$n_gram_size, ft = p$frequency_threshold)
mydata <- p.features
set.seed(1234)
wssplot(mydata)
r <- kmeans(mydata, 8)
t <- table(mydata$n, r$cluster)
randIndex(t)
plot3d(jitter(mydata$n), jitter(mydata$sv), 1, col=r$cluster)
plot3d(jitter(mydata$n), jitter(mydata$sv), 1, col=r$cluster)
plot(p.features$n, p.features$ft, col=r$cluster)
r <- kmeans(mydata, 16)
t <- table(mydata$n, r$cluster)
randIndex(t)
plot(p.features$n, p.features$ft, col=r$cluster)
plot3d(jitter(mydata$n), jitter(mydata$sv), mydata$f, col=r$cluster)
plot3d(jitter(mydata$n), jitter(mydata$sv), mydata$f, col=r$cluster)
p.features <- data.frame(f = p$f_measure, n = p$n_gram_size, ft = p$frequency_threshold)
mydata <- p.features
set.seed(1234)
wssplot(mydata)
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
p.features <- data.frame(f = p$f_measure, n = p$n_gram_size, ft = p$frequency_threshold)
mydata <- p.features
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
p <- dbGetQuery(cross_validation, "performance", '{}', 0, 0)
p.features <- data.frame(f = p$f_measure, n = p$n_gram_size, ft = p$frequency_threshold)
mydata <- p.features
set.seed(1234)
wssplot(mydata)
r <- kmeans(mydata, 16)
t <- table(mydata$n, r$cluster)
randIndex(t)
plot(p.features$n, p.features$ft, col=r$cluster)
plot3d(jitter(mydata$n), jitter(mydata$sv), mydata$f, col=r$cluster)
mydata$f
plot3d(jitter(mydata$n), jitter(mydata$ft), mydata$f, col=r$cluster)
plot3d(jitter(mydata$n), mydata$ft, mydata$f, col=r$cluster)
p.features <- data.frame(f = p$f_measure, sv = p$smoothing_value, n = p$n_gram_size, ft = p$frequency_threshold)
mydata <- p.features
set.seed(1234)
wssplot(mydata)
r <- kmeans(mydata, 16)
t <- table(mydata$n, r$cluster)
randIndex(t)
plot3d(jitter(mydata$n), jitter(mydata$sv), mydata$ft, col=r$cluster)
plot(jitter(p.features$n), jitter(p.features$ft), col=r$cluster)
t
p.features <- data.frame(f = p$f_measure, sv = p$smoothing_value, n = p$n_gram_size, ft = p$frequency_threshold)
mydata <- p.features
set.seed(1234)
wssplot(mydata)
r <- kmeans(mydata, 4)
t <- table(mydata$n, r$cluster)
randIndex(t)
plot3d(jitter(mydata$n), jitter(mydata$sv), mydata$ft, col=r$cluster)
p.features <- data.frame(f = p$f_measure, sv = p$smoothing_value, n = p$n_gram_size, ft = p$frequency_threshold)
mydata <- p.features
set.seed(1234)
wssplot(mydata)
r <- kmeans(mydata, 8)
t <- table(mydata$n, r$cluster)
randIndex(t)
plot3d(jitter(mydata$n), jitter(mydata$sv), mydata$ft, col=r$cluster)
p.features <- data.frame(f = p$f_measure, n = p$n_gram_size, ft = p$frequency_threshold)
mydata <- p.features
set.seed(1234)
wssplot(mydata)
r <- kmeans(mydata, 8)
t <- table(mydata$n, r$cluster)
randIndex(t)
plot(jitter(p.features$n), jitter(p.features$ft), col=r$cluster)
plot3d(jitter(mydata$n), mydata$ft, mydata$f, col=r$cluster)
?"plot3d"
?scatterplot3d
?plot
p.features <- data.frame(f = p$f_measure, n = p$n_gram_size, ft = p$frequency_threshold, c <- p$classifier_name)
mydata <- p.features
set.seed(1234)
wssplot(mydata)
r <- kmeans(mydata, 8)
p.features <- data.frame(f = p$f_measure, n = p$n_gram_size, ft = p$frequency_threshold, c = p$classifier_name)
factor(p.features$c)
as.numeric(factor(p.features$c))
p.features <- data.frame(f = p$f_measure, n = p$n_gram_size, ft = p$frequency_threshold, c = p$classifier_name)
p.features$c <- as.numeric(factor(p.features$c))
mydata <- p.features
set.seed(1234)
wssplot(mydata)
r <- kmeans(mydata, 8)
t <- table(mydata$n, r$cluster)
randIndex(t)
plot(jitter(p.features$n), jitter(p.features$ft), col=r$cluster)
plot3d(jitter(mydata$n), mydata$ft, mydata$f, col=r$cluster)
plot3d(jitter(mydata$n), mydata$ft, mydata$c, col=r$cluster)
p.features <- data.frame(f = p$f_measure, n = p$n_gram_size, ft = p$frequency_threshold, c = p$classifier_name, sv = p$smoothing_value)
p.features$c <- as.numeric(factor(p.features$c))
mydata <- p.features
set.seed(1234)
wssplot(mydata)
r <- kmeans(mydata, 8)
t <- table(mydata$n, r$cluster)
randIndex(t)
plot(jitter(p.features$n), jitter(p.features$ft), col=r$cluster)
plot3d(jitter(mydata$n), mydata$ft, mydata$c, col=r$cluster)
plot3d(jitter(mydata$n), mydata$ft, jitter(mydata$c), col=r$cluster)
r <- kmeans(mydata, 8)
r <- kmeans(mydata, 4)
t <- table(mydata$n, r$cluster)
t
randIndex(t)
plot(jitter(p.features$f), jitter(p.features$c), col=r$cluster)
plot(jitter(p.features$c), jitter(p.features$f), col=r$cluster)
p.features <- data.frame(f = p$f_measure, c = p$classifier_name)
p.features$c <- as.numeric(factor(p.features$c))
mydata <- p.features
set.seed(1234)
wssplot(mydata)
r <- kmeans(mydata, 4)
t <- table(mydata$n, r$cluster)
r <- kmeans(mydata, 4)
t <- table(mydata$f, r$cluster)
randIndex(t)
t <- table(mydata$c, r$cluster)
randIndex(t)
t
plot(jitter(p.features$c), jitter(p.features$f), col=r$cluster)
plot(jitter(p.features$c), p.features$f, col=r$cluster)
goodTurning
library(edgeR)
install.packages(edgeR)
??goodTurning
install.packages(edgeRun)
install.packages("edgeRun"
)
install.packages("edgeR")
update.packages()
goodTuring <- function(x, conf=1.96)
#	Simple Good-Turing algorithm for frequency estimation
#	as described by Gale and Sampson (1995)
#  Sampson's C code translated to C++ and optimized by Aaron Lun
#	Has been tested against Sampson's C code from
#	http://www.grsampson.net/RGoodTur.html
#	and gives identical results.
#	Gordon Smyth and Aaron Lun
#	9 Nov 2010.  Last modified 7 Sep 2012.
{
#	Raw frequencies
x <- as.integer(x)
if(max(x) < length(x)) {
n <- tabulate(x+1L)
n0 <- n[1]
n <- n[-1]
max.x <- length(n)
r <- seq.int(from=1L,to=max.x)
r <- r[n>0]
n <- n[n>0]
} else {
r <- sort(unique(x))
z <- match(x,r)
n <- tabulate(z)
if(r[1]==0) {
n0 <- n[1]
n <- n[-1]
r <- r[-1]
} else {
n0 <- 0
}
}
#	SGT algorithm (no type checking, as that's enforced above)
out <- .Call(.cR_simple_good_turing, r, n, conf)
if (is.character(out)) { stop(out) }
names(out) <- c("P0","proportion")
out$count <- r
out$n <- n
out$n0 <- n0
out
}
goodTuringPlot <- function(x)
#	Simple Good-Turing algorithm for frequency estimation
#	as described by Gale and Sampson (1995)
#	Has been tested against Sampson's C code from
#	http://www.grsampson.net/RGoodTur.html
#	and gives identical results.
#	Gordon Smyth
#	9 Nov 2010.  Last modified 21 Nov 2010.
{
#	Raw frequencies
n <- tabulate(x+1L)
n0 <- n[1]
n <- n[-1]
max.x <- length(n)
r <- seq.int(from=1L,to=max.x)
#	Fit a linear trend to log-frequencies
n.pos <- n[n>0]
r.pos <- r[n>0]
l <- length(n.pos)
q <- diff(c(0L,r.pos,2L*r.pos[l]-r.pos[l-1]),lag=2)/2
z <- n.pos/q
design <- cbind(1,log(r.pos))
fit <- lm.fit(x=design,y=log(z))
plot(log(r.pos),log(z),xlab="log count",ylab="log frequency")
abline(fit)
invisible(list(r=r.pos,n=n.pos))
}
goodTuringProportions <- function(counts)
#	Transform counts to approximately normal expression values
#	Gordon Smyth
#	15 Dec 2010.  Last modified 5 Jan 2011.
{
z <- counts <- as.matrix(counts)
nlibs <- ncol(counts)
for (i in 1:nlibs) {
g <- goodTuring(counts[,i])
p0 <- g$P0/g$n0
zero <- z[,i]==0
z[zero,i] <- p0
m <- match(z[!zero,i],g$count)
z[!zero,i] <- g$proportion[m]
}
z
}
f = c(1, 2, 2, 3, 3)
goodTuring(f)
source("https://bioconductor.org/biocLite.R")
biocLite("edgeR")
library(edgeR)
goodTuring(l)
goodTuring(f)
f
f <- c(1, 2, 2)
goodTuring(f)
f <- c(1)
goodTuring(f)
goodTuring(c(1, 2, 3, 4, 3))
goodTuring(c(2, 3, 4, 3))
goodTuring(c(1, 1, 1, 1))
1+1
?png
png(test.png, width = 5, height = 5, units = "in")
png("test.png", width = 5, height = 5, units = "in")
png("test.png", width = 5, height = 5, units = "in", res=300)
rtfm
png("test.png", width = 5*300, height = 5*300, units = "in", res=300)
dev.off()
png("test.png", width = 5*300, height = 5*300, units = "in", res=300)
setwd("~/git/DialogueClassifying/src/boris_analysis")
library(RMongo)
classifier <- dbGetDistinct(cross_validation, "performance", key = 'classifier_name')
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
classifier <- dbGetDistinct(cross_validation, "performance", key = 'classifier_name')
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
pr.C <- dbGetQuery(cross_validation, "performance", '{"classifier_name": "cosine"}', 0, 0)
8*3
View(pr.C)
pr.M <- bGetQuery(cross_validation, "performance", '{"classifier_name": "mean kulback leibler"}', 0, 0)
pr.M <- bGetQuery(cross_validation, "performance", '{"classifier_name": "mean kullback leibler"}', 0, 0)
pr.C <- dbGetQuery(cross_validation, "performance", '{"classifier_name": "cosine"}', 0, 0)
pr.M <- dbGetQuery(cross_validation, "performance", '{"classifier_name": "mean kullback leibler"}', 0, 0)
library(ggplot2)
ggplot(pr.C, aes(x=f_measure)) +
geom_histogram(aes(y=..density..), binwidth=.5, colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")
ggplot(pr.C, aes(x=f_measure)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")
?"RMongo"
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
pr.complete <- dbGetQuery(cross_validation, "performance", '{}', 0, 0)
ddpl
library(pplyr)
library(plyr)
View(pr.M)
head(ddply(pr.complete, c('f_measure'), summarise))
library(reshape2)
dcast(pr.complete, f_measure ~ frequency_threshold)
head(dcast(pr.complete, f_measure ~ frequency_threshold))
head(dcast(pr.complete, n_gram_size + smoothing_value ~ frequency_threshold, value.var = "f_measure"))
head(dcast(pr.complete, n_gram_size + smoothing_value + f_measure ~ frequency_threshold, value.var = "f_measure"))
head(dcast(pr.complete, n_gram_size + smoothing_value ~ frequency_threshold, value.var = "f_measure"))
?dcast
head(dcast(pr.complete, classifier_name + citeria + n_gram_size + smoothing_value ~ frequency_threshold, value.var = "f_measure"))
head(dcast(pr.complete, classifier_name + criteria + n_gram_size + smoothing_value ~ frequency_threshold, value.var = "f_measure"))
f_by_t <- dcast(pr.complete, classifier_name + criteria + n_gram_size + smoothing_value ~ frequency_threshold, value.var = "f_measure")
f_by_t$f_diff <- f_by_t$`1` - f_by_t$`2`
View(f_by_t)
mean(f_by_t$f_diff)
median(f_by_t$f_diff)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
pr.complete <- dbGetQuery(cross_validation, "performance", '{}', 0, 0)
f_by_t <- dcast(pr.complete, classifier_name + criteria + n_gram_size + smoothing_value ~ frequency_threshold, value.var = "f_measure")
f_by_t$f_diff <- f_by_t$`1` - f_by_t$`2`
mean(f_by_t$f_diff)
median(f_by_t$f_diff)
boxplot(f_by_t$f_diff)
?abs
abs(-4)
f_by_t$f_diff <- abs(f_by_t$`1` - f_by_t$`2`)
median(f_by_t$f_diff)
mean(f_by_t$f_diff)
ggplot(f_by_t, aes(x=f_measure, y=f_diff)) geom_point(shape=1)
ggplot(f_by_t, aes(x=f_measure, y=f_diff)) + geom_point(shape=1)
ggplot(f_by_t, aes(x=f_by_t$`1` + f_by_t$`2`, y=f_diff)) + geom_point(shape=1)
ggplot(f_by_t, aes(x=f_by_t$`1` + f_by_t$`2`, y=f_diff)) + geom_point(shape=1)  + geom_smooth(method=lm)
ggplot(f_by_t, aes(x='1')) +
geom_histogram(aes(y=..density..),  colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")
ggplot(f_by_t, aes(x="1")) +
geom_histogram(aes(y=..density..),  colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")
ggplot(f_by_t, aes(x=f_by_t$`1`)) +
geom_histogram(aes(y=..density..),  colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")
ggplot(f_by_t, aes(x=f_by_t$`2`)) +
geom_histogram(aes(y=..density..),  colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")
ggplot(f_by_t, aes(x=(f_by_t$`1` + f_by_t$`2`)/2, y=f_diff)) + geom_point(shape=1)  + geom_smooth(method=lm)
ggplot(f_by_t, aes(x=(f_by_t$`1` + f_by_t$`2`), y=f_diff)) + geom_point(shape=1)  + geom_smooth(method=lm)
ggplot(f_by_t, aes(x=(`1` + `2`), y=f_diff)) + geom_point(shape=1)  + geom_smooth(method=lm)
?which
```{r}
ggplot(f_by_t, aes(x=f_diff)) +
geom_histogram(aes(y=..density..),  colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")
```
f_by_t[which(f_by_t$`1` > 0.8),]
library(scatterplot3d)
library(scatterplot3d)
scatterplot3d(f_by_t$`1`, f_by_t$`2`, f_by_t$f_diff)
f_by_t[which(f_by_t$`1` > 0.8 & f_by_t$`1` > 0.8),]
f_by_t[which(f_by_t$`1` > 0.8 & f_by_t$`1` > 0.8),] -> large_f
scatterplot3d(large_f$`1`, large_f$`2`, large_f$f_diff)
scatterplot3d(large_f$`1`, large_f$`2`, large_f$f_diff, highlight.3d=TRUE)
scatterplot3d(large_f$`1`, large_f$`2`, large_f$f_diff, type = h)
scatterplot3d(large_f$`1`, large_f$`2`, large_f$f_diff, type = "h")
mean(f_by_t$`1`)
mean(f_by_t$`2`)
count(mean(f_by_t$`2`))
length(f_by_t$`2`)
t.test(f_by_t$`1`, f_by_t$`2`, paired = TREU)
t.test(f_by_t$`1`, f_by_t$`2`, paired = TRUE)
ggplot(f_by_t[which(),], aes(x=(`1` + `2`), y=f_diff)) + geom_point(shape=1)  + geom_smooth(method=lm)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
pr.complete <- dbGetQuery(cross_validation, "performance", '{}', 0, 0)
f_by_t <- dcast(pr.complete, classifier_name + criteria + n_gram_size + smoothing_value ~ frequency_threshold, value.var = "f_measure")
f_by_t$f_diff <- abs(f_by_t$`1` - f_by_t$`2`)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
pr.complete <- dbGetQuery(cross_validation, "performance", '{}', 0, 0)
f_by_t <- dcast(pr.complete, classifier_name + criteria + n_gram_size + smoothing_value ~ frequency_threshold, value.var = "f_measure")
f_by_t$f_diff <- abs(f_by_t$`1` - f_by_t$`2`)
ggplot(f_by_t, aes(x=f_diff)) +
geom_histogram(aes(y=..density..),  colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")
large_f <- f_by_t[which(f_by_t$`1` > 0.8 & f_by_t$`1` > 0.8),]
scatterplot3d(large_f$`1`, large_f$`2`, large_f$f_diff, type = h)
large_f <- f_by_t[which(f_by_t$`1` > 0.8 & f_by_t$`1` > 0.8),]
scatterplot3d(large_f$`1`, large_f$`2`, large_f$f_diff, type = "h")
large_f <- f_by_t[which(f_by_t$`1` > 0.8 & f_by_t$`2` > 0.8),]
f_by_t[which(f_by_t$`1` > 0.8 & f_by_t$`1` > 0.8),] -> large_f
large_f <- f_by_t[which(f_by_t$`1` > 0.8 & f_by_t$`2` > 0.8),]
scatterplot3d(large_f$`1`, large_f$`2`, large_f$f_diff, type = "h")
head(pr.C)
arrange(pr.C, f_measure)
head(arrange(pr.C, f_measure))
?arrange
head(arrange(pr.C, desc(f_measure)))
best.C <- arrange(pr.C, desc(f_measure))
best.C[1:10,]
best.C <- arrange(pr.C, desc(f_measure))
best.C <- best.C[1:10,]
View(best.C)
names(best.C)
best.C <- best.C[1:10, c(2, 4, 7, 11, 12, 13)]
best.C
library(knitr)
kable(best.C)
pr.J
pr.J <- dbGetQuery(cross_validation, "performance", '{"classifier_name": "jensen"}', 0, 0)
best.M <- arrange(pr.M, desc(f_measure))
best.M <- best.M[1:10, c(2, 4, 7, 11, 12, 13)]
kable(best.M)
dcast(pr.C, classifier_name + n_gram_size + smoothing_value + frequency_threshold ~ criteria, value.var = "f_measure")
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
pr.C <- dbGetQuery(cross_validation, "performance", '{"classifier_name": "cosine"}', 0, 0)
pr.J <- dbGetQuery(cross_validation, "performance", '{"classifier_name": "jensen"}', 0, 0)
pr.M <- dbGetQuery(cross_validation, "performance", '{"classifier_name": "mean kullback leibler"}', 0, 0)
pr.R <- dbGetQuery(cross_validation, "performance", '{"classifier_name": "rank order"}', 0, 0)
dcast(pr.C, classifier_name + n_gram_size + smoothing_value + frequency_threshold ~ criteria, value.var = "f_measure")
head(dcast(pr.C, classifier_name + n_gram_size + smoothing_value + frequency_threshold ~ criteria, value.var = "f_measure"))
0 / 8
boxplot(pr.C$f_measure)
boxplot(pr.J$f_measure)
boxplot(pr.M$f_measure)
boxplot(pr.R$f_measure)
unique(pr.C$criteria)
arrange(pr.C, desc(f_measure))
arrange(pr.C, desc(f_measure))[1,]
arrange(pr.C[which(pr.C$criteria == "juged_bad"),], desc(f_measure))
arrange(pr.C[which(pr.C$criteria == "juged_bad"),], desc(f_measure))[1:10, c(2, 4, 7, 11, 12, 13)]
kable(arrange(pr.C[which(pr.C$criteria == "juged_bad"),], desc(f_measure))[1:10, c(2, 4, 7, 11, 12, 13)])
unique(pr.C$criteria)
for(c_name in unique(pr.C$criteria)) {
kable(arrange(pr.C[which(pr.C$criteria == c_name),], desc(f_measure))[1:n_best, c(2, 4, 7, 11, 12, 13)])
}
n_best = 3
for(c_name in unique(pr.C$criteria)) {
kable(arrange(pr.C[which(pr.C$criteria == c_name),], desc(f_measure))[1:n_best, c(2, 4, 7, 11, 12, 13)])
}
for(c_name in unique(pr.C$criteria)) {
kable(arrange(pr.C[which(pr.C$criteria == c_name),], desc(f_measure))[1:n_best, c(2, 4, 7, 11, 12, 13)])
}
print
help print
help(print)
for(c_name in unique(pr.C$criteria)) {
print(kable(arrange(pr.C[which(pr.C$criteria == c_name),], desc(f_measure))[1:n_best, c(2, 4, 7, 11, 12, 13)]))
}
for(c_name in arrange(unique(pr.C$criteria)) {
print(kable(arrange(pr.C[which(pr.C$criteria == c_name),], desc(f_measure))[1:n_best, c(2, 4, 7, 11, 12, 13)]))
}
for(c_name in arrange(unique(pr.C$criteria))) {
print(kable(arrange(pr.C[which(pr.C$criteria == c_name),], desc(f_measure))[1:n_best, c(2, 4, 7, 11, 12, 13)]))
}
?arrange
for(c_name in order(unique(pr.C$criteria))) {
for(c_name in order(unique(pr.C$criteria))) {
print(kable(arrange(pr.C[which(pr.C$criteria == c_name),], desc(f_measure))[1:n_best, c(2, 4, 7, 11, 12, 13)]))
}
for(c_name in order(unique(pr.C$criteria))) {
print(kable(arrange(pr.C[which(pr.C$criteria == c_name),], desc(f_measure))[1:n_best, c(2, 4, 7, 11, 12, 13)]))
}
for(c_name in order(unique(pr.C$criteria))) {
print(kable(arrange(pr.C[which(pr.C$criteria == c_name),], desc(f_measure))[1:n_best, c(2, 4, 7, 11, 12, 13)]))
}
for(c_name in order(unique(pr.C$criteria))) {
print(kable(arrange(pr.C[which(pr.C$criteria == c_name),], desc(f_measure))[1:n_best, c(2, 4, 7, 11, 12, 13)]))
}
)
for(c_name in order(unique(pr.C$criteria))) {
print(kable(arrange(pr.C[which(pr.C$criteria == c_name),], desc(f_measure))[1:n_best, c(2, 4, 7, 11, 12, 13)]))
}
order(unique(pr.C$criteria))
unique(pr.C$criteria))
unique(pr.C$criteria)
sort(unique(pr.C$criteria))
for(c_name in sort(unique(pr.C$criteria))) {
print(kable(arrange(pr.C[which(pr.C$criteria == c_name),], desc(f_measure))[1:n_best, c(2, 4, 7, 11, 12, 13)]))
}
for(c_name in sort(unique(pr.J$criteria))) {
print(kable(arrange(pr.J[which(pr.C$criteria == c_name),], desc(f_measure))[1:n_best, c(2, 4, 7, 11, 12, 13)]))
}
