performance.cosine$frequency_threshold <- as.factor(performance.cosine$frequency_threshold)
d <- summarySE(performance.cosine, "f_measure", c("n_gram_size","criteria"))
d$n_gram_size <- factor(d$n_gram_size)
ggplot(d, aes(x=n_gram_size, y=f_measure, fill=criteria)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=f_measure-sd, ymax=f_measure+sd),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
d
performance.cosine = dbGetQuery(cross_validation, "performance", '{"classifier_name": "rank order"}', 0, 0)
performance.cosine$frequency_threshold <- as.factor(performance.cosine$frequency_threshold)
d <- summarySE(performance.cosine, "f_measure", c("n_gram_size","criteria"))
d$n_gram_size <- factor(d$n_gram_size)
ggplot(d, aes(x=criteria, y=f_measure, fill=n_gram_size)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=f_measure-sd, ymax=f_measure+sd),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
performance.cosine = dbGetQuery(cross_validation, "performance", '{"classifier_name": "cosine"}', 0, 0)
performance.cosine$frequency_threshold <- as.factor(performance.cosine$frequency_threshold)
d <- summarySE(performance.cosine, "f_measure", c("n_gram_size","criteria"))
d$n_gram_size <- factor(d$n_gram_size)
ggplot(d, aes(x=criteria, y=f_measure, fill=n_gram_size)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=f_measure-sd, ymax=f_measure+sd),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
performance.cosine = dbGetQuery(cross_validation, "performance", '{"classifier_name": "cosine", "frequncy_threshold": 1}', 0, 0)
performance.cosine$frequency_threshold <- as.factor(performance.cosine$frequency_threshold)
d <- summarySE(performance.cosine, "f_measure", c("n_gram_size","criteria"))
d$n_gram_size <- factor(d$n_gram_size)
ggplot(d, aes(x=criteria, y=f_measure, fill=n_gram_size)) +
geom_bar(position=position_dodge(), stat="identity") +
performance.cosine = dbGetQuery(cross_validation, "performance", '{"classifier_name": "cosine", "frequency_threshold": 1}', 0, 0)
performance.cosine = dbGetQuery(cross_validation, "performance", '{"classifier_name": "cosine", "frequency_threshold": "1"}', 0, 0)
performance.cosine = dbGetQuery(cross_validation, "performance", '{"classifier_name": "cosine", "frequency_threshold": 1}', 0, 0)
performance.cosine$frequency_threshold <- as.factor(performance.cosine$frequency_threshold)
d <- summarySE(performance.cosine, "f_measure", c("n_gram_size","criteria"))
d$n_gram_size <- factor(d$n_gram_size)
ggplot(d, aes(x=criteria, y=f_measure, fill=n_gram_size)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=f_measure-sd, ymax=f_measure+sd),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
d
performance.cosine = dbGetQuery(cross_validation, "performance",
'{"classifier_name": "cosine", "frequency_threshold": 1, "smoothing_value": 0.05}', 0, 0)
performance.cosine$frequency_threshold <- as.factor(performance.cosine$frequency_threshold)
d <- summarySE(performance.cosine, "f_measure", c("n_gram_size","criteria"))
d$n_gram_size <- factor(d$n_gram_size)
performance.cosine = dbGetQuery(cross_validation, "performance", '{"classifier_name": "cosine", "frequency_threshold": 1, "smoothing_value": 0.05}', 0, 0)
performance.cosine$frequency_threshold <- as.factor(performance.cosine$frequency_threshold)
d <- summarySE(performance.cosine, "f_measure", c("n_gram_size","criteria"))
d$n_gram_size <- factor(d$n_gram_size)
d
ggplot(d, aes(x=criteria, y=f_measure, fill=n_gram_size)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=f_measure-sd, ymax=f_measure+sd),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
performance.cosine = dbGetQuery(cross_validation, "performance", '{"classifier_name": "cosine", "frequency_threshold": 1, "smoothing_value": 0.25}', 0, 0)
performance.cosine$frequency_threshold <- as.factor(performance.cosine$frequency_threshold)
d <- summarySE(performance.cosine, "f_measure", c("n_gram_size","criteria"))
d$n_gram_size <- factor(d$n_gram_size)
ggplot(d, aes(x=criteria, y=f_measure, fill=n_gram_size)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=f_measure-sd, ymax=f_measure+sd),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
performance.cosine = dbGetQuery(cross_validation, "performance", '{"classifier_name": "cosine", "frequency_threshold": 1, "smoothing_value": 0.5}', 0, 0)
performance.cosine$frequency_threshold <- as.factor(performance.cosine$frequency_threshold)
d <- summarySE(performance.cosine, "f_measure", c("n_gram_size","criteria"))
d$n_gram_size <- factor(d$n_gram_size)
ggplot(d, aes(x=criteria, y=f_measure, fill=n_gram_size)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=f_measure-sd, ymax=f_measure+sd),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
performance.cosine = dbGetQuery(cross_validation, "performance", '{"classifier_name": "jensen", "frequency_threshold": 1, "smoothing_value": 0.5}', 0, 0)
performance.cosine$frequency_threshold <- as.factor(performance.cosine$frequency_threshold)
d <- summarySE(performance.cosine, "f_measure", c("n_gram_size","criteria"))
d$n_gram_size <- factor(d$n_gram_size)
ggplot(d, aes(x=criteria, y=f_measure, fill=n_gram_size)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=f_measure-sd, ymax=f_measure+sd),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
performance.cosine = dbGetQuery(cross_validation, "performance", '{"classifier_name": "jensen", "frequency_threshold": 1, "smoothing_value": 0.05}', 0, 0)
performance.cosine$frequency_threshold <- as.factor(performance.cosine$frequency_threshold)
d <- summarySE(performance.cosine, "f_measure", c("n_gram_size","criteria"))
d$n_gram_size <- factor(d$n_gram_size)
ggplot(d, aes(x=criteria, y=f_measure, fill=n_gram_size)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=f_measure-sd, ymax=f_measure+sd),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
performance.cosine = dbGetQuery(cross_validation, "performance", '{"classifier_name": "jensen", "smoothing_value": 0.05}', 0, 0)
performance.cosine$frequency_threshold <- as.factor(performance.cosine$frequency_threshold)
d <- summarySE(performance.cosine, "f_measure", c("n_gram_size","criteria"))
d$n_gram_size <- factor(d$n_gram_size)
ggplot(d, aes(x=criteria, y=f_measure, fill=n_gram_size)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=f_measure-sd, ymax=f_measure+sd),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
performance.cosine = dbGetQuery(cross_validation, "performance", '{"classifier_name": "jensen", "smoothing_value": 0.25}', 0, 0)
performance.cosine$frequency_threshold <- as.factor(performance.cosine$frequency_threshold)
d <- summarySE(performance.cosine, "f_measure", c("n_gram_size","criteria"))
d$n_gram_size <- factor(d$n_gram_size)
ggplot(d, aes(x=criteria, y=f_measure, fill=n_gram_size)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=f_measure-sd, ymax=f_measure+sd),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
performance.cosine = dbGetQuery(cross_validation, "performance", '{"classifier_name": "jensen", "smoothing_value": 0.5}', 0, 0)
performance.cosine$frequency_threshold <- as.factor(performance.cosine$frequency_threshold)
d <- summarySE(performance.cosine, "f_measure", c("n_gram_size","criteria"))
d$n_gram_size <- factor(d$n_gram_size)
ggplot(d, aes(x=criteria, y=f_measure, fill=n_gram_size)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=f_measure-sd, ymax=f_measure+sd),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
performance.cosine = dbGetQuery(cross_validation, "performance", '{"classifier_name": "jensen", "smoothing_value": 0.05}', 0, 0)
performance.cosine$frequency_threshold <- as.factor(performance.cosine$frequency_threshold)
d <- summarySE(performance.cosine, "f_measure", c("n_gram_size","criteria"))
d$n_gram_size <- factor(d$n_gram_size)
ggplot(d, aes(x=criteria, y=f_measure, fill=n_gram_size)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=f_measure-sd, ymax=f_measure+sd),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
performance.cosine = dbGetQuery(cross_validation, "performance", '{"classifier_name": "cosine", "smoothing_value": 0.05}', 0, 0)
performance.cosine$frequency_threshold <- as.factor(performance.cosine$frequency_threshold)
d <- summarySE(performance.cosine, "f_measure", c("n_gram_size","criteria"))
d$n_gram_size <- factor(d$n_gram_size)
ggplot(d, aes(x=criteria, y=f_measure, fill=n_gram_size)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=f_measure-sd, ymax=f_measure+sd),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
p = dbGetQuery(cross_validation, "performance", '{"classifier_name": "cosine"}', 0, 0)
stem(p$f_measure)
?stem
stem(p$f_measure, width = 20)
stem(p$f_measure, width = 100)
stem(log10(p$f_measure), width = 100)
stem(p$f_measure, width = 100)
library(Hmisc)
capture.output(stem(p$f_measure, width = 100))
latexTranslate(capture.output(stem(p$f_measure, width = 100)))
summary(latexTranslate(capture.output(stem(p$f_measure, width = 100))))
latex((latexTranslate(capture.output(stem(p$f_measure, width = 100)))))
?latex
l <- latex((latexTranslate(capture.output(stem(p$f_measure, width = 100)))))
l
l <- latex(stem(p$f_measure, width = 100), file = '~/test.tex')
l
l <- latex(capture.output(stem(p$f_measure, width = 100), file = '~/test.tex'))
l
l <- latex(latexTranslate(capture.output(stem(p$f_measure, width = 100), file = '~/test.tex')))
l <- latex(capture.output(stem(p$f_measure, width = 100)), file = '~/test.tex')
l
l <- latex(latexTranslate(capture.output(stem(p$f_measure, width = 100), file = '~/test.tex')))
l <- latex(latexTranslate(capture.output(stem(p$f_measure, width = 100))), file = '~/test.tex')
l
stem(p$f_measure)
p = dbGetQuery(cross_validation, "performance", '{"classifier_name": "jensen"}', 0, 0)
stem(p$f_measure)
p = dbGetQuery(cross_validation, "performance", '{"classifier_name": "jensen", "f_measure": "{$gt: 0.5}"}', 0, 0)
stem(p$f_measure)
p = dbGetQuery(cross_validation, "performance", '{"classifier_name": "jensen", "f_measure": {$gt: 0.5}}', 0, 0)
stem(p$f_measure)
p = dbGetQuery(cross_validation, "performance", '{"classifier_name": "cosine", "f_measure": {$gt: 0.5}}', 0, 0)
stem(p$f_measure)
p = dbGetQuery(cross_validation, "performance", '{"classifier_name": "rank order", "f_measure": {$gt: 0.5}}', 0, 0)
stem(p$f_measure)
p = dbGetQuery(cross_validation, "performance", '{"classifier_name": "mean kullback leibler", "f_measure": {$gt: 0.5}}', 0, 0)
stem(p$f_measure)
p = dbGetQuery(cross_validation, "performance", '{"f_measure": {$gt: 0.5}}', 0, 0)
stem(p$f_measure)
p = dbGetQuery(cross_validation, "performance", '{}', 0, 0)
classifier <- dbGetDistinct(cross_validation, "performance", key = 'classifier_name')
classifier
library(RMongo)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
p <- dbGetQuery(cross_validation, "performance", '{}', 0, 0)
classifier <- dbGetDistinct(cross_validation, "performance", key = 'classifier_name')
for (c in classifier) {
print(c)
}
?sprintf
library(RMongo)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
classifier <- dbGetDistinct(cross_validation, "performance", key = 'classifier_name')
for (c in classifier) {
print(c)
query = sprintf('{"classifier_name": "%s"}', c)
print(query)
#p.c <- dbGetQuery(cross_validation, "performance", '{}', 0, 0)
stem()
}
library(RMongo)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
classifier <- dbGetDistinct(cross_validation, "performance", key = 'classifier_name')
for (c in classifier) {
print(c)
query = sprintf('{"classifier_name": "%s"}', c)
print(query)
#p.c <- dbGetQuery(cross_validation, "performance", '{}', 0, 0)
#stem()
}
library(RMongo)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
classifier <- dbGetDistinct(cross_validation, "performance", key = 'classifier_name')
for (c in classifier) {
print(c)
query = sprintf('{"classifier_name": "%s"}', c)
print(query)
p.c <- dbGetQuery(cross_validation, "performance", '{}', 0, 0)
stem(p.c$f_measure)
}
library(RMongo)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
classifier <- dbGetDistinct(cross_validation, "performance", key = 'classifier_name')
for (c in classifier) {
print(c)
query = sprintf('{"classifier_name": "%s"}', c)
print(query)
p.c <- dbGetQuery(cross_validation, "performance", query, 0, 0)
stem(p.c$f_measure)
}
library(RMongo)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
classifier <- dbGetDistinct(cross_validation, "performance", key = 'classifier_name')
for (c in classifier) {
print(sprintf("Classifier: %s"), c)
query = sprintf('{"classifier_name": "%s"}', c)
p.c <- dbGetQuery(cross_validation, "performance", query, 0, 0)
stem(p.c$f_measure)
}
library(RMongo)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
classifier <- dbGetDistinct(cross_validation, "performance", key = 'classifier_name')
for (c in classifier) {
print(sprintf("Classifier: %s", c))
query = sprintf('{"classifier_name": "%s"}', c)
p.c <- dbGetQuery(cross_validation, "performance", query, 0, 0)
stem(p.c$f_measure)
}
p.c <- dbGetQuery(cross_validation, "performance", '{"classifier_name": "rank order", "n_gram_size": 1}', 0, 0)
p <- dbGetQuery(cross_validation, "performance", '{"classifier_name": "rank order", "n_gram_size": 1}', 0, 0)
stem(p$f_measure)
p <- dbGetQuery(cross_validation, "performance", '{"classifier_name": "rank order", "n_gram_size": 2}', 0, 0)
stem(p$f_measure)
p <- dbGetQuery(cross_validation, "performance", '{"classifier_name": "rank order", "n_gram_size": 3}', 0, 0)
stem(p$f_measure)
p <- dbGetQuery(cross_validation, "distance", '{"classifier_name": "rank order", "n_gram_size": 3}', 0, 0)
p <- dbGetQuery(cross_validation, "distance", '{"classifier": "rank order", "size": 3}', 0, 0)
stem(p$f_measure)
stem(p$distance)
p <- dbGetQuery(cross_validation, "distances", '{"classifier": "rank order", "size": 3}', 0, 0)
stem(p$distance)
p <- dbGetQuery(cross_validation, "distances", '{"classifier": "rank order", "size": 1}', 0, 0)
stem(p$distance)
p <- dbGetQuery(cross_validation, "distances", '{"classifier": "rank order", "size": 8}', 0, 0)
stem(p$distance)
stem(p$distance)
cross_validation <- mongoDbConnect("TEST_classification_cross_validation", "localhost", 27017)
p <- dbGetQuery(cross_validation, "distances", '{"classifier": "rank order", "size": 1}', 0, 0)
p <- dbGetQuery(cross_validation, "performance", '{"classifier_name": "rank order", "n_gram_size": 3}', 0, 0)
?t.test
library(RMongo)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
classifier <- dbGetDistinct(cross_validation, "performance", key = 'classifier_name')
for (c in classifier) {
print(sprintf("Classifier: %s", c))
query = sprintf('{"classifier_name": "%s"}', c)
p.c <- dbGetQuery(cross_validation, "performance", query, 0, 0)
stem(p.c$f_measure)
}
library(RMongo)
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
p <- dbGetQuery(cross_validation, "performance", '{}', 0, 0)
p.db <- dbGetQuery(cross_validation, "performance", '{}', 0, 0)
p <- data.frame(c = p.db$classifier_name)
p
head(p)
p <- data.frame(c = p.db$classifier_name, n = p.db$n_gram_size, f = p.db$frequency_threshold, l = p.db$smoothing_value, f = p.db$f_measure)
head(p)
View(p)
View(p.db)
dcast(p, c + s ~ n, f)
library(reshape2)
dcast(p, c + s ~ n, f)
p <- data.frame(c = p.db$classifier_name, s = p.db$criteria, n = p.db$n_gram_size, t = p.db$frequency_threshold, l = p.db$smoothing_value, f = p.db$f_measure)
dcast(p, c + s ~ n, f)
head(p)
dcast(p, c + s ~ n, c(f))
dcast(p, c + s ~ n, value.var = f)
dcast(p, c + s ~ n, value.var = "f")
p <- data.frame(c = p.db$classifier_name, s = p.db$criteria, n = p.db$n_gram_size, t = p.db$frequency_threshold, l = p.db$smoothing_value, f = p.db$f_measure)
dcast(p, c + s ~ n, value.var = "f")
p.db <- dbGetQuery(cross_validation, "performance", '{"smoothing_value": 0.5}', 0, 0)
p <- data.frame(c = p.db$classifier_name, s = p.db$criteria, n = p.db$n_gram_size, t = p.db$frequency_threshold, l = p.db$smoothing_value, f = p.db$f_measure)
dcast(p, c + s ~ n, value.var = "f")
p <- data.frame(c = p.db$classifier_name, s = p.db$criteria, n = p.db$n_gram_size,
t = p.db$frequency_threshold, l = p.db$smoothing_value, f = p.db$f_measure)
dcast(p, c + s ~ n, value.var = "f", fun.aggregate = max)
p.db <- dbGetQuery(cross_validation, "performance", '{"n_gram_size": 1}', 0, 0)
p <- data.frame(c = p.db$classifier_name, s = p.db$criteria, n = p.db$n_gram_size,
t = p.db$frequency_threshold, l = p.db$smoothing_value, f = p.db$f_measure)
p.db <- dbGetQuery(cross_validation, "performance", '{"n_gram_size": 1, "frequency_threshold": 1}', 0, 0)
p <- data.frame(c = p.db$classifier_name, s = p.db$criteria, n = p.db$n_gram_size,
t = p.db$frequency_threshold, l = p.db$smoothing_value, f = p.db$f_measure)
dcast(p, c + s ~ t, value.var = "f", fun.aggregate = max)
dcast(p, c + s ~ t, value.var = "f")
dcast(p, c + s ~ l, value.var = "f")
round(3.12345, 2)
p <- data.frame(c = p.db$classifier_name, s = p.db$criteria, n = p.db$n_gram_size,
t = p.db$frequency_threshold, l = p.db$smoothing_value, f = round(p.db$f_measure, 2))
dcast(p, c + s ~ l, value.var = "f")
for (size in 1:8) {
print(size)
}
x[[1]] <- 'a'
x = c()
x[[1]] <- 'a'
x
x[[4]] <- 'a'
x
data = c()
for (size in 1:8) {
query = sprintf('{"n_gram_size": %s, "frequency_threshold": 1}', n)
p.db <- dbGetQuery(cross_validation, "performance", query, 0, 0)
p <- data.frame(c = p.db$classifier_name, s = p.db$criteria, n = p.db$n_gram_size,
t = p.db$frequency_threshold, l = p.db$smoothing_value, f = round(p.db$f_measure, 2))
data[[n]] <- dcast(p, c + s ~ l, value.var = "f")
}
data = c()
for (size in 1:8) {
query = sprintf('{"n_gram_size": %s, "frequency_threshold": 1}', size)
p.db <- dbGetQuery(cross_validation, "performance", query, 0, 0)
p <- data.frame(c = p.db$classifier_name, s = p.db$criteria, n = p.db$n_gram_size,
t = p.db$frequency_threshold, l = p.db$smoothing_value, f = round(p.db$f_measure, 2))
data[[size]] <- dcast(p, c + s ~ l, value.var = "f")
}
cross_validation <- mongoDbConnect("classification_cross_validation", "localhost", 27017)
data = c()
for (size in 1:8) {
query = sprintf('{"n_gram_size": %s, "frequency_threshold": 1}', size)
p.db <- dbGetQuery(cross_validation, "performance", query, 0, 0)
p <- data.frame(c = p.db$classifier_name, s = p.db$criteria, n = p.db$n_gram_size,
t = p.db$frequency_threshold, l = p.db$smoothing_value, f = round(p.db$f_measure, 2))
data[[size]] <- dcast(p, c + s ~ l, value.var = "f")
}
data[[1]]
colbind(data[[1]], data[[2]][,3:5])
cbind(data[[1]], data[[2]][,3:5])
cbind(data[[1]], data[[2]][,3:5], data[[3]][,3:5], data[[4]][,3:5], data[[5]][,3:5], data[[6]][,3:5], data[[7]][,3:5], data[[8]][,3:5])
ft_1 <- cbind(data[[1]], data[[2]][,3:5], data[[3]][,3:5], data[[4]][,3:5], data[[5]][,3:5], data[[6]][,3:5], data[[7]][,3:5], data[[8]][,3:5])
ft_1[,1]
ft_1[,1]['cosine']
ft_1[ft_1$c == 'cosine', 1]
ft_1[ft_1$c == 'cosine', 1] <- 'cos'
library(car)
recode(ft_1$c, "'cosine'='cos'")
ft_1 <- cbind(data[[1]], data[[2]][,3:5], data[[3]][,3:5], data[[4]][,3:5], data[[5]][,3:5], data[[6]][,3:5], data[[7]][,3:5], data[[8]][,3:5])
ft_1$c[ft_1$c == 'cosine'] <- 'cos'
ft_1$c[ft_1$c == 'cosine'] <- factor('cos')
ft_1$c <- factor(ft_1$c)
ft_1$c
ft_1 <- cbind(data[[1]], data[[2]][,3:5], data[[3]][,3:5], data[[4]][,3:5], data[[5]][,3:5], data[[6]][,3:5], data[[7]][,3:5], data[[8]][,3:5])
ft_1$c <- factor(ft_1$c)
ft_1$c
ft_1$c[ft_1$c == 'cosine'] <- 'cos'
ft_1$c
ft_1 <- cbind(data[[1]], data[[2]][,3:5], data[[3]][,3:5], data[[4]][,3:5], data[[5]][,3:5], data[[6]][,3:5], data[[7]][,3:5], data[[8]][,3:5])
c(levels(ft_1$c))
levels(ft_1$c)
levels(ft_1$c) <- c(levels(ft_1$c))
ft_1$c
ft_1[ft_1$c == 'cosine'] <- 'cos'
ft_1$c
ft_1 <- cbind(data[[1]], data[[2]][,3:5], data[[3]][,3:5], data[[4]][,3:5], data[[5]][,3:5], data[[6]][,3:5], data[[7]][,3:5], data[[8]][,3:5])
levels(ft_1$c) <- c(levels(ft_1$c))
ft_1[ft_1$c == 'cosine'] <- 'cos'
ft_1$c
ft_1 <- cbind(data[[1]], data[[2]][,3:5], data[[3]][,3:5], data[[4]][,3:5], data[[5]][,3:5], data[[6]][,3:5], data[[7]][,3:5], data[[8]][,3:5])
levels(ft_1$c) <- c(levels(ft_1$c))
ft_1$c
ft_1[ft_1$c == 'cosine']
ft_1$c[ft_1$c == 'cosine'] <- 'cos'
ft_1 <- cbind(data[[1]], data[[2]][,3:5], data[[3]][,3:5], data[[4]][,3:5], data[[5]][,3:5], data[[6]][,3:5], data[[7]][,3:5], data[[8]][,3:5])
ft_1$c[ft_1$c
ft_1$c[ft_1$c]
ft_1$c[ft_1$c]
ft_1 <- cbind(data[[1]], data[[2]][,3:5], data[[3]][,3:5], data[[4]][,3:5], data[[5]][,3:5], data[[6]][,3:5], data[[7]][,3:5], data[[8]][,3:5])
ft_1$c[ft_1$c == 'cosine']
ft_1$c[ft_1$c == 'cosine'] <- 'cos'
ft_1 <- cbind(data[[1]], data[[2]][,3:5], data[[3]][,3:5], data[[4]][,3:5], data[[5]][,3:5], data[[6]][,3:5], data[[7]][,3:5], data[[8]][,3:5])
levels(ft_1$c) <- c(levels(ft_1$c))
ft_1$c[ft_1$c == 'cosine']
ft_1$c[ft_1$c == 'cosine'] <- 'cos'
revalue(ft_1$c, c("cosine"="cos"))
ft_1 <- cbind(data[[1]], data[[2]][,3:5], data[[3]][,3:5], data[[4]][,3:5], data[[5]][,3:5], data[[6]][,3:5], data[[7]][,3:5], data[[8]][,3:5])
revalue(ft_1$c, c("cosine"="cos"))
revalue(ft_1$c, c("cosine"="cos", "jensen"="j", "mean kullback leibler"="mkl", "rank order"="ro"))
ft_1$c
ft_1 <- cbind(data[[1]], data[[2]][,3:5], data[[3]][,3:5], data[[4]][,3:5], data[[5]][,3:5], data[[6]][,3:5], data[[7]][,3:5], data[[8]][,3:5])
revalue(ft_1$c, c("cosine"="cos", "jensen"="j", "mean kullback leibler"="mkl", "rank order"="ro"))
ft_1$c
ft_1$c <- revalue(ft_1$c, c("cosine"="cos", "jensen"="j", "mean kullback leibler"="mkl", "rank order"="ro"))
ft_1$c
ft_1
data = c()
for (size in 1:8) {
query = sprintf('{"n_gram_size": %s, "frequency_threshold": 1}', size)
p.db <- dbGetQuery(cross_validation, "performance", query, 0, 0)
p <- data.frame(c = p.db$classifier_name, s = p.db$criteria, n = p.db$n_gram_size,
t = p.db$frequency_threshold, l = p.db$smoothing_value, f = round(p.db$f_measure, 2))
data[[size]] <- dcast(p, s + c ~ l, value.var = "f")
}
# table for frequency_threshold = 1 (n = 1:8)
ft_1 <- cbind(data[[1]], data[[2]][,3:5], data[[3]][,3:5], data[[4]][,3:5], data[[5]][,3:5], data[[6]][,3:5], data[[7]][,3:5], data[[8]][,3:5])
ft_1$c <- revalue(ft_1$c, c("cosine"="cos", "jensen"="j", "mean kullback leibler"="mkl", "rank order"="ro"))
ft_1
levels(ft_1$s)
as.list(levels(ft_1$s))
as.factor(levels(ft_1$s))
levels(ft_1$s)
ft_1 <- cbind(data[[1]], data[[2]][,3:5], data[[3]][,3:5], data[[4]][,3:5], data[[5]][,3:5], data[[6]][,3:5], data[[7]][,3:5], data[[8]][,3:5])
ft_1$c <- revalue(ft_1$c, c("cosine"="cos", "jensen"="j", "mean kullback leibler"="mkl", "rank order"="ro"))
ft_1$pos <- revalue(ft_1$c,
c("juged_bad"="bad", "juged_good"="good", "long_interactions"="long", "real"="real", "real_vs_simulated_worst"="real",
"short_interactions"="short","simulated"="sim_best", "simulated_worst_vs_real"="sim_worst", "simulation_quality_best"="sim-best",
"simulation_quality_worst"="sim-worst", "task_failed"="miss", "task_successful"="success", "word_accuracy_100"="wa-100",
"word_accuracy_60"="wa-60"))
ft_1$neg <- revalue(ft_1$c,
c("juged_bad"="good", "juged_good"="bad", "long_interactions"="shor", "real"="sim_best", "real_vs_simulated_worst"="real",
"short_interactions"="long", "simulated"="real", "simulated_worst_vs_real"="real", "simulation_quality_best"="sim-worst",
ft_1 <- cbind(data[[1]], data[[2]][,3:5], data[[3]][,3:5], data[[4]][,3:5], data[[5]][,3:5], data[[6]][,3:5], data[[7]][,3:5], data[[8]][,3:5])
ft_1 <- cbind(data[[1]], data[[2]][,3:5], data[[3]][,3:5], data[[4]][,3:5], data[[5]][,3:5], data[[6]][,3:5], data[[7]][,3:5], data[[8]][,3:5])
ft_1$c <- revalue(ft_1$c, c("cosine"="cos", "jensen"="j", "mean kullback leibler"="mkl", "rank order"="ro"))
ft_1$pos <- revalue(ft_1$s,
ft_1 <- cbind(data[[1]], data[[2]][,3:5], data[[3]][,3:5], data[[4]][,3:5], data[[5]][,3:5], data[[6]][,3:5], data[[7]][,3:5], data[[8]][,3:5])
ft_1$c <- revalue(ft_1$c, c("cosine"="cos", "jensen"="j", "mean kullback leibler"="mkl", "rank order"="ro"))
ft_1 <- cbind(data[[1]], data[[2]][,3:5], data[[3]][,3:5], data[[4]][,3:5], data[[5]][,3:5], data[[6]][,3:5], data[[7]][,3:5], data[[8]][,3:5])
head(ft_1)
ft_1$c <- revalue(ft_1$c, c("cosine"="cos", "jensen"="j", "mean kullback leibler"="mkl", "rank order"="ro"))
ft_1$pos <- revalue(ft_1$s,
c("juged_bad"="bad", "juged_good"="good", "long_interactions"="long", "real"="real", "real_vs_simulated_worst"="real",
"short_interactions"="short","simulated"="sim_best", "simulated_worst_vs_real"="sim_worst", "simulation_quality_best"="sim-best",
"simulation_quality_worst"="sim-worst", "task_failed"="miss", "task_successful"="success", "word_accuracy_100"="wa-100",
"word_accuracy_60"="wa-60"))
head(ft_1)
ft_1$neg <- revalue(ft_1$s,
c("juged_bad"="good", "juged_good"="bad", "long_interactions"="shor", "real"="sim_best", "real_vs_simulated_worst"="real",
"short_interactions"="long", "simulated"="real", "simulated_worst_vs_real"="real", "simulation_quality_best"="sim-worst",
"simulation_quality_worst"="sim-best", "task_failed"="success", "task_successful"="miss", "word_accuracy_100"="wa-60",
"word_accuracy_60"="wa-100"))
head(ft_1)
head(ft_1[,c(28, 29, 2:24)])
head(ft_1[,c(27, 28, 2:24)])
head(ft_1[,c(27, 28)])
head(ft_1[,c(27, 28, 2)])
head(ft_1[,c(27, 28, 2, 3:4)])
head(ft_1[,c(27, 28, 2, 3:26)])
head(ft_1[,c(27, 28, 2, 3:26)])
head(ft_1[,c(27, 28, 2, c(3:26)])
head(ft_1[,c(27, 28, 2, c(3:26))])
head(ft_1[,c(27, 28, 2, 3:26)])
ft_1[,c(27, 28, 2, 3:26)]
library(Hmisc)
latexTabular(ft_1)
latexTranslate(ft_1)
capture.output(ft_1)
latexTranslate(capture.output(ft_1))
?latexTranslate
latex(latexTranslate(capture.output(ft_1)))
latex(latexTranslate(capture.output(ft_1)), file = '../latex/performance_results_ft_1.tex')
latex(latexTranslate(capture.output(ft_1)), file = '../../latex/performance_results_ft_1.tex')
latexTabular(latexTranslate(capture.output(ft_1)), file = '../../latex/performance_results_ft_1.tex')
latex(latexTranslate(ft_1), file = '../../latex/performance_results_ft_1.tex')
latexTabular(latexTranslate(capture.output(ft_1)), file = '../../latex/performance_results_ft_1.tex')
latexTabular(ft_1), file = '../../latex/performance_results_ft_1.tex')
latexTabular(ft_1, file = '../../latex/performance_results_ft_1.tex')
?latexTabular
latexTranslate(ft_1, file = '../../latex/performance_results_ft_1.tex')
latexTranslate(latexTabular(ft_1), file = '../../latex/performance_results_ft_1.tex')
latex(ft_1, file = '../../latex/performance_results_ft_1.tex')
latex(ft_1, file = 'latex/performance_results_ft_1.tex')
latex(ft_1, file = 'performance_results_ft_1.tex')
latex(ft_1, file = '../../latex/performance_results_ft_1.tex')
latex(latexTranslate(ft_1), file = '../../latex/performance_results_ft_1.tex')
latexTranslate(ft_1)
?write.csv
?write.csv2
write.csv(x = ft_1, file = 'ft_1.csv')
ft_1 <- cbind(data[[1]], data[[2]][,3:5], data[[3]][,3:5], data[[4]][,3:5], data[[5]][,3:5], data[[6]][,3:5], data[[7]][,3:5], data[[8]][,3:5])
ft_1$c <- revalue(ft_1$c, c("cosine"="cos", "jensen"="j", "mean kullback leibler"="mkl", "rank order"="ro"))
ft_1$pos <- revalue(ft_1$s,
c("juged_bad"="bad", "juged_good"="good", "long_interactions"="long", "real"="real", "real_vs_simulated_worst"="real",
"short_interactions"="short","simulated"="sim_best", "simulated_worst_vs_real"="sim_worst", "simulation_quality_best"="sim-best",
"simulation_quality_worst"="sim-worst", "task_failed"="miss", "task_successful"="success", "word_accuracy_100"="wa-100",
"word_accuracy_60"="wa-60"))
ft_1$neg <- revalue(ft_1$s,
c("juged_bad"="good", "juged_good"="bad", "long_interactions"="shor", "real"="sim_best", "real_vs_simulated_worst"="real",
"short_interactions"="long", "simulated"="real", "simulated_worst_vs_real"="real", "simulation_quality_best"="sim-worst",
"simulation_quality_worst"="sim-best", "task_failed"="success", "task_successful"="miss", "word_accuracy_100"="wa-60",
"word_accuracy_60"="wa-100"))
write.csv(x = ft_1, file = 'ft_1.csv')
